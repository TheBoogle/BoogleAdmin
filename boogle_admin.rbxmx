<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<Meta name="ExplicitAutoJoints">true</Meta>
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBXC4F54A30A1FC45A88A1B8E0DBED2AB81">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">BoogleAdmin</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
		</Properties>
		<Item class="Folder" referent="RBXA3BC298B017F46C3B6EF78D8F4FEE3E8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Remotes</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="RemoteEvent" referent="RBX7AC9CF4B31694E3B8687F1C999D0EC14">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Notify</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="RemoteEvent" referent="RBXF64ADBB45CBA4EBBA4FCA179B17FBC06">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">TextMessage</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="RemoteFunction" referent="RBX000316DC222D4858A2D99FFA8E68C7AB">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">GetKnownCommands</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="RemoteEvent" referent="RBXFD44042CB051467984CA498606BC16B8">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">PostCommand</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
		</Item>
		<Item class="Folder" referent="RBX21CD621C59264443A2CD58FAE82678D1">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Source</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
			<Item class="ModuleScript" referent="RBX20628CC3B83C444DA28C56E711CE49FF">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">CMD</string>
					<string name="ScriptGuid">{8284E30C-990D-4A86-80D2-4C03AB05183E}</string>
					<ProtectedString name="Source"><![CDATA[type Command = {
	Name: string,
	Arguments: table,
}

local CMD = {}
local MT = {__index = CMD}
local self = {}

local ARGTypes = require(script.Parent.ArgumentTypes)

local Config = shared["__BoogleAdmin"].Config

local LoadedCommandsWCategory = {}
local LoadedCommands = {}

function getLength(t)
	local i = 0
	for _, v in pairs(t) do
		i += 1
	end
	return i
end

local HelpLists = {}
local KnownCommands = {}

for _, Category: ModuleScript in pairs(script.Parent.Commands:GetChildren()) do
	LoadedCommandsWCategory[Category.Name] = require(Category)
	for K, Loaded: table in pairs(LoadedCommandsWCategory[Category.Name]) do
		Loaded.Name = K
		Loaded.Category = Category.Name
		
		
		LoadedCommands[K] = Loaded
	end
end


for AcessLevel, _ in pairs(Config.Permissions) do
	local Helplist = '\n'
	KnownCommands[AcessLevel] = {}
	for k, v in pairs(LoadedCommandsWCategory) do
		local OldHelpList = Helplist
		Helplist = Helplist .. ('<font size="20" color="#FFA500">%s</font>'):format(k:upper())   .. '\n'
		local added = 0
		for _, Module in pairs(v) do
			if LoadedCommands[Module.Name].PermLevel <= AcessLevel then
				if LoadedCommands[Module.Name].OtherNames then
					for _, v in pairs(LoadedCommands[Module.Name].OtherNames) do
						table.insert(KnownCommands[AcessLevel],{v,LoadedCommands[Module.Name].Arguments})
					end
				end
				
				table.insert(KnownCommands[AcessLevel],{LoadedCommands[Module.Name].Name,LoadedCommands[Module.Name].Arguments})
				added += 1
				local S = ('-> %s%s '):format(Config.Prefix,LoadedCommands[Module.Name].Name)

				for _, Arg in pairs(LoadedCommands[Module.Name].Arguments) do
					S = S .. ('<b>[%s]</b> '):format(Arg)
				end
				S = S:sub(1,#S-1)

				Helplist = Helplist .. S .. '\n'
			end
		end
		if added == 0 then
			Helplist = OldHelpList
		end
	end
	HelpLists[AcessLevel] = ('Access Rank: %s'):format(Config.PermToUserFront[AcessLevel]) .. '\n' .. Helplist
end

function getAccessRank(ID)
	for K, v in pairs(shared["__BoogleAdmin"].Config.Permissions) do
		if table.find(v,ID) then
			return K
		end
	end
	return -1
end

shared["__BoogleAdmin"].Remotes.GetKnownCommands.OnServerInvoke = function(P)
	return KnownCommands[getAccessRank(P.UserId)]
end

shared["__BoogleAdmin"].HelpList = HelpLists
shared["__BoogleAdmin"].Logs = {}




function CMD:parse(Context: table, Input: string)
	
	
	Context['UserInput'] = Input
	
	Input = Input:gsub(Config.Prefix, '')
	local NewInput = Input:lower()
	NewInput = NewInput:split(' ')
	
	
	
	local CommandType = NewInput[1]
	
	for _, LC in pairs(LoadedCommands) do
		if LC.OtherNames and table.find(LC.OtherNames, CommandType) then
			CommandType = LC.Name
			break
		end
	end
	
	if not LoadedCommands[CommandType] then return 'Invalid Command' end
	
	local ExpectedArguments: Command = LoadedCommands[CommandType].Arguments
	
	table.remove(NewInput, 1)
	
	
	
	local Arguments = {}
	
	local ArgIndex = 1
	
	local UsesPlayer = false
	
	for _, ArgType: string in pairs(ExpectedArguments) do
		local Input = NewInput[ArgIndex]
		if ArgType == 'Reason' or ArgType == 'Message' then
			Input = ''
			if ExpectedArguments[1] == 'Player' then
				table.remove(NewInput,1)
			end
 			for _, v in pairs(NewInput) do
				Input = Input .. v .. ' '
			end
			if Input == '' then
				Input = nil
			end
		end
		local Result = ARGTypes[ArgType](Context.Invoker, Input)
	
		table.insert(Arguments, Result)
		
		if ArgType == 'Player' then UsesPlayer = true; Context.Invokee = Result end
		
		ArgIndex += 1
	end
	
	--if #Arguments ~= #ExpectedArguments then return 'Invalid Arguments' end
	
	local AccessGranted = false

	for PermLevel, UserIDList in pairs(Config.Permissions) do
		for _, UserId in ipairs(UserIDList) do
			if UserId == Context.Invoker and LoadedCommands[CommandType].PermLevel <= PermLevel then
				AccessGranted = true
			end
		end
	end

	if not AccessGranted then return 'Permissions invalid' end
	
	Context.Command = CommandType
	
	table.insert(shared["__BoogleAdmin"].Logs, Context)
	
	
	local _, err = pcall(function()
		if UsesPlayer then
			for _, v in pairs(Arguments[1]) do
				local FakeArgs = table.clone(Arguments)
				FakeArgs[1][1] = v
				coroutine.wrap(function()
					LoadedCommands[CommandType].Function(Context,FakeArgs)
				end)()
			end
		else
			coroutine.wrap(function()
				LoadedCommands[CommandType].Function(Context,Arguments)
			end)()
		end
		
	end)
	if err then warn(err) end
	
	return 200
end

warn(('Boogle Admin --> Loaded %s commands'):format(getLength(LoadedCommands)))
	
return setmetatable(self, MT)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="ModuleScript" referent="RBX6E1CD2A472B44F5B9D62E944A6D34E08">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">DateFormat</string>
					<string name="ScriptGuid">{52B1E1B1-3C13-4765-89A0-103BA42F8550}</string>
					<ProtectedString name="Source"><![CDATA[local OneYear = 8760

function CorrectWords(Amount: number, Word: string)
	if Amount ~= 1 then return ('%s %s'):format(Amount,Word .. 's') else return ('%s %s'):format(Amount,Word) end
end

return function(Then: number)
	local Now = os.time()
	
	local TimeUntil = (Then - Now) / 3600
	
	if TimeUntil >= (OneYear * 100) then
		return 'Never'
	elseif TimeUntil * 3600 < 60 then
		return CorrectWords(math.ceil(TimeUntil * 3600), 'second')
	elseif TimeUntil <= 1 then
		return CorrectWords(math.ceil(TimeUntil * 60), 'minute')
	elseif TimeUntil <= 24 then
		return CorrectWords(math.ceil(TimeUntil), 'hour')
	else
		return CorrectWords(math.ceil(TimeUntil / 24), 'day')
	end
	
	
end]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
			</Item>
			<Item class="Folder" referent="RBX8D25783DA02A4947B5B891D6B471E72E">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<string name="Name">Commands</string>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX950F07AB473C4E02BC39AFE1B5807C7D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Fun</string>
						<string name="ScriptGuid">{BFF6DE10-AFBE-4079-B301-35B1138028B4}</string>
						<ProtectedString name="Source"><![CDATA[return {
	['fire'] = {
		Arguments = {'Player', 'Size', 'Color'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player and not Character.Head:FindFirstChildOfClass('Fire') then return end


			local Fire = Instance.new('Fire', Character.Head)
			Fire.Size = Arguments[2] or 9 

			pcall(function()
				Fire.Color = Arguments[3]
				Fire.SecondaryColor = Arguments[3]
			end)


		end
	},
	['gear'] = {
		Arguments = {'Player', 'Gear ID'},
		PermLevel = shared["__BoogleAdmin"].HeadAdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			if not Player then return end

			local Gear = game:GetService("InsertService"):LoadAsset(Arguments[2])
			local Gear = Gear:GetChildren()[1]
			Gear.Parent = Player.Backpack

		end
	},
	['hat'] = {
		Arguments = {'Player', 'Hat ID'},
		PermLevel = shared["__BoogleAdmin"].HeadAdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end

			local Hat = game:GetService("InsertService"):LoadAsset(Arguments[2])
			local Hat = Hat:GetChildren()[1]
			Character.Humanoid:AddAccessory(Hat)

		end
	},
	['light'] = {
		Arguments = {'Player', 'Size', 'Color', 'Brightness'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player and not Character.Head:FindFirstChildOfClass('PointLight') then return end


			local PointLight = Instance.new('PointLight', Character.Head)
			PointLight.Range = Arguments[2] or 8
			PointLight.Brightness = Arguments[4] or 1

			pcall(function()
				PointLight.Color = Arguments[3]
			end)


		end
	},
	['smoke'] = {
		Arguments = {'Player', 'Size', 'Color'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player and not Character.Head:FindFirstChildOfClass('Fire') then return end


			local Smoke = Instance.new('Smoke', Character.Head)
			Smoke.Size = Arguments[2] or 1

			pcall(function()
				Smoke.Color = Arguments[3]
			end)


		end
	},
	['sparkles'] = {
		Arguments = {'Player', 'Color'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player and not Character.Head:FindFirstChildOfClass('Fire') then return end


			local Sparkles = Instance.new('Sparkles', Character.Head)

			pcall(function()
				Sparkles.Color = Arguments[2]
			end)


		end
	},
	['unfire'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			pcall(function()
				Character.Head:FindFirstChildOfClass('Fire'):Destroy()
			end)


		end
	},
	['unlight'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			pcall(function()
				Character.Head:FindFirstChildOfClass('PointLight'):Destroy()
			end)


		end
	},
	['unsmoke'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			pcall(function()
				Character.Head:FindFirstChildOfClass('Smoke'):Destroy()
			end)


		end
	},
	['unsparkles'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			pcall(function()
				Character.Head:FindFirstChildOfClass('Sparkles'):Destroy()
			end)


		end
	}
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX69CD42472FED4AAE8D66C6F085F8B653">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Misc</string>
						<string name="ScriptGuid">{4F92B3D1-E0B1-4589-8801-E33F4AD9B410}</string>
						<ProtectedString name="Source"><![CDATA[function getAccessRank(ID)
	for K, v in pairs(shared["__BoogleAdmin"].Config.Permissions) do
		if table.find(v,ID) then
			return K
		end
	end
	return -1
end

local SizedCharacters = {}

function changeRig(Context, Arguments,RigType: Enum.HumanoidRigType)
	-- also from adonis  https://github.com/Sceleratis/Adonis/blob/7782a751c42b7731f38ac723af29ed75ce2e4842/MainModule/Server/Core/Functions.lua#L1216-L1247
	local plr = Arguments[1][1]

	local rigType = RigType

	local Humanoid: Humanoid = plr.Character and plr.Character:FindFirstChildOfClass("Humanoid")

	local HumanoidDescription = Humanoid:GetAppliedDescription() or game.Players:GetHumanoidDescriptionFromUserId(plr.UserId)
	local newCharacterModel: Model = game.Players:CreateHumanoidModelFromDescription(HumanoidDescription, rigType)
	local Animate: BaseScript = newCharacterModel.Animate

	newCharacterModel.Humanoid.DisplayName = Humanoid.DisplayName
	newCharacterModel.Name = plr.Name

	local oldCFrame = plr.Character and plr.Character:GetPivot() or CFrame.new()

	if plr.Character then
		plr.Character:Destroy()
		plr.Character = nil
	end
	plr.Character = newCharacterModel

	newCharacterModel:PivotTo(oldCFrame)
	newCharacterModel.Parent = workspace

	-- hacky way to fix other people being unable to see animations.
	for _=1,2 do
		if Animate then
			Animate.Disabled = not Animate.Disabled
		end
	end

	return newCharacterModel

end

return {
	['char'] = {
		Arguments = {'Player', 'User ID'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player:Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			local OldCFrame = Character:GetPrimaryPartCFrame()

			Player.CharacterAppearanceId = Arguments[2]
			Player:LoadCharacter()
			Player.Character:SetPrimaryPartCFrame(OldCFrame)

		end
	},
	['cmds'] = {
		OtherNames = {'help','commands'},
		Arguments = {},
		PermLevel =shared["__BoogleAdmin"].VIPRank,
		Function = function(Context, Arguments)
			shared["__BoogleAdmin"].Remotes.TextMessage:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Boogle Admin | CMDS-', shared["__BoogleAdmin"].HelpList[getAccessRank(Context.Invoker)])
		end
	},
	['heal'] = {
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			Character.Humanoid.Health = Character.Humanoid.MaxHealth

		end
	},
	['health'] = {
		Arguments = {'Player', 'Amount'},
		OtherNames = {'sethealth','hp'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			Character.Humanoid.MaxHealth = Arguments[2]
			Character.Humanoid.Health = Character.Humanoid.MaxHealth

		end
	},
	['jump'] = {
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			Character.Humanoid.Jump = true

		end
	},
	['r15'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)
			changeRig(Context,Arguments,Enum.HumanoidRigType.R15)
		end
	},
	['r6'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)
			changeRig(Context,Arguments,Enum.HumanoidRigType.R6)
		end
	},
	['refresh'] = {
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player:Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			local OldCFrame = Character:GetPrimaryPartCFrame()

			Player:LoadCharacter()
			Player.Character:SetPrimaryPartCFrame(OldCFrame)

		end
	},
	['reset'] = {
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player:Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end

			Player:LoadCharacter()


		end
	},
	['sit'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].VIPRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			Character.Humanoid.Sit = true

		end
	},
	['size'] = {
		Arguments = {'Player', 'Size'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(_, args: {}) -- Stolen from Adonis cuz im lazy
			local plr = args[1][1]
			local sizeLimit = 20
			local num = math.clamp(tonumber(args[2]) or 1, 0.001, sizeLimit) -- Size limit exceeding over 20 would be unnecessary and may potientially create massive lag !!

			if not args[2] or not tonumber(args[2]) then
				num = 1
			end

			for _, v in pairs(game.Players:GetPlayers(plr)) do
				if v ~= plr then continue end
				local char = v.Character
				local human = char and char:FindFirstChildOfClass("Humanoid")

				if not human then

					continue
				end

				if not SizedCharacters[char] then
					SizedCharacters[char] = num
				elseif SizedCharacters[char] and SizedCharacters[char]*num < sizeLimit then
					SizedCharacters[char] = SizedCharacters[char]*num
				else
					continue
				end

				if human and human.RigType == Enum.HumanoidRigType.R15 then
					for _, val in pairs(human:GetChildren()) do
						if val:IsA("NumberValue") and val.Name:match(".*Scale") then
							val.Value *= num
						end
					end
				elseif human and human.RigType == Enum.HumanoidRigType.R6 then
					local motors = {}
					table.insert(motors, char.HumanoidRootPart:FindFirstChild("RootJoint"))
					for _, motor in pairs(char.Torso:GetChildren()) do
						if motor:IsA("Motor6D") then table.insert(motors, motor) end
					end
					for _, motor in pairs(motors) do
						motor.C0 = CFrame.new((motor.C0.Position * num)) * (motor.C0 - motor.C0.Position)
						motor.C1 = CFrame.new((motor.C1.Position * num)) * (motor.C1 - motor.C1.Position)
					end

					for _, v in ipairs(char:GetDescendants()) do
						if v:IsA("BasePart") then
							v.Size *= num
						elseif v:IsA("Accessory") and v:FindFirstChild("Handle") then
							local handle = v.Handle
							handle.AccessoryWeld.C0 = CFrame.new((handle.AccessoryWeld.C0.Position * num)) * (handle.AccessoryWeld.C0 - handle.AccessoryWeld.C0.Position)
							handle.AccessoryWeld.C1 = CFrame.new((handle.AccessoryWeld.C1.Position * num)) * (handle.AccessoryWeld.C1 - handle.AccessoryWeld.C1.Position)
							local mesh = handle:FindFirstChildOfClass("SpecialMesh")
							if mesh then
								mesh.Scale *= num
							end
						elseif v:IsA("SpecialMesh") and v.Parent.Name ~= "Handle" and v.Parent.Name ~= "Head" then
							v.Scale *= num
						end
					end
				end
			end
		end
	},
	['speed'] = {
		Arguments = {'Player', 'Number'},
		OtherNames = {'spd','walkspeed'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			Character.Humanoid.WalkSpeed = Arguments[2]

		end
	},
	['time'] = {
		Arguments = {'Number'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			game.Lighting.ClockTime = Arguments[1]

		end
	},
	
	['unchar'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player:Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			local OldCFrame = Character:GetPrimaryPartCFrame()

			Player.CharacterAppearanceId = Player.UserId
			Player:LoadCharacter()
			Player.Character:SetPrimaryPartCFrame(OldCFrame)

		end
	}
	
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXA683864B5942409498285D6A107251F1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Moderation</string>
						<string name="ScriptGuid">{FF7FC287-AB2F-4B5C-BB63-B3CFD4F11D4C}</string>
						<ProtectedString name="Source"><![CDATA[local DS = game:GetService('DataStoreService'):GetDataStore('BoogleAdminBans')
local DS2 = game:GetService('DataStoreService'):GetOrderedDataStore('BoogleAdminBansO')

local WDS = game:GetService('DataStoreService'):GetDataStore('BoogleAdminWarns2')

local cache = {}
local keyFormat = ('uid_%s')

shared["__BoogleAdmin"].Banned = {}

game.Players.PlayerAdded:Connect(function(P)
	local banReason = shared["__BoogleAdmin"].Banned[P.UserId]

	if banReason then P:Kick('\n' .. ('You are currently banned from this server for: %s'):format(banReason)) end
end)

game.Players.PlayerAdded:Connect(function(P)
	local banReason = DS:GetAsync(keyFormat:format(P.UserId))

	if banReason then P:Kick('\n' .. ('You are currently banned from this game for: %s'):format(banReason)) end
end)

local output 

function realLength(T)
	local i = 0
	for _,v  in pairs(T) do
		i += 1
	end
	return i
end

return {
	['ban'] = {
		Arguments = {'Player', 'Reason'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end
			print(Arguments)
			shared["__BoogleAdmin"].Banned[Player.UserId] = Arguments[2] or 'No reason provided'
			Player:Kick(('%s You were server-banned for: %s'):format('\n', Arguments[2] or 'No reason provided'))

			shared["__BoogleAdmin"].Remotes.Notify:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Banned User', ('%s was server-banned.'):format(Player.Name))

		end
	},
	['kick'] = {
		Arguments = {'Player', 'Reason'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			Player:Kick(('%s You were kicked for: %s'):format('\n', Arguments[2] or 'No reason provided'))

		end
	},
	['unban'] = {
		Arguments = {'User ID'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player:Player = Arguments[1]
			if not Player then return end

			shared["__BoogleAdmin"].Banned[Player] = nil

			shared["__BoogleAdmin"].Remotes.Notify:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Unbanned User', ('%s was unbanned.'):format(game.Players:GetNameFromUserIdAsync(Player)))
		end
	},
	['fly'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].VIPRank,
		Function = function(Context, Arguments)

			local Character = Arguments[1][1].Character
			if not Character or Character:FindFirstChild('BoogleFly') then return end
			local FlyScript = script.BoogleFly:Clone()
			FlyScript.Parent = Character
			FlyScript.Disabled = false

			shared["__BoogleAdmin"].Remotes.Notify:FireClient(game.Players:GetPlayerFromCharacter(Character),'Flight Enabled', 'You can press E to toggle your flight.')

		end
	},
	['unfly'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].VIPRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			pcall(function()
				Character:FindFirstChild('BoogleFly'):SetAttribute('Fly', false)
				wait(.25)
				Character:FindFirstChild('BoogleFly'):Destroy()

			end)


		end
	},
	['f3x'] = {
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].HeadAdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			if not Player then return end

			if Player.Backpack:FindFirstChild("Building Tools") then return end

			local Gear = script["Building Tools"]:Clone()
			Gear.Parent = Player.Backpack

		end
	},
	['pban'] = {
		Arguments = {'Player', 'Reason'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]

			if not Player then return end

			DS:SetAsync(keyFormat:format(Player.UserId),Arguments[2] or 'No reason provided')
			DS2:SetAsync(Player.UserId,os.time())

			pcall(function()
				Player:Kick(('%s You were game banned for: %s'):format('\n', Arguments[2] or 'No reason provided'))
			end)

			shared["__BoogleAdmin"].Remotes.Notify:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Banned User', ('%s was game-banned.'):format(game.Players:GetNameFromUserIdAsync(Player.UserId)))

		end
	},
	['unpban'] = {
		Arguments = {'User ID'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1]
			if not Player then return end

			DS:RemoveAsync(keyFormat:format(Player))
			DS2:RemoveAsync(keyFormat:format(Player))

			shared["__BoogleAdmin"].Remotes.Notify:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Unbanned User', ('%s was unbanned.'):format(game.Players:GetNameFromUserIdAsync(Player)))
		end
	},
	['bring'] = {
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			local ContextRunner = game.Players:GetPlayerByUserId(Context.Invoker).Character

			Character:SetPrimaryPartCFrame(ContextRunner:GetPrimaryPartCFrame() * CFrame.new(0,2,0))


		end
	},
	['to'] = {
		Arguments = {'Player'},
		PermLevel =shared["__BoogleAdmin"].VIPRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			local ContextRunner = game.Players:GetPlayerByUserId(Context.Invoker).Character

			ContextRunner:SetPrimaryPartCFrame(Character:GetPrimaryPartCFrame() * CFrame.new(0,2,0))


		end
	},
	['logs'] = {
		OtherNames = {},
		Arguments = {},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local OutputString = ''
			local Logs = shared["__BoogleAdmin"].Logs

			for Iter = #Logs, 1, -1 do
				local Context = Logs[Iter]
				OutputString = OutputString .. ("%s @ %s -> %s"):format(Context.InvokerName, os.date('%c', Context.Time), Context.UserInput) .. '\n'
			end

			shared["__BoogleAdmin"].Remotes.TextMessage:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Server Admin Logs', OutputString)
		end
	},
	['admins'] = {
		OtherNames = {'mods'},
		Arguments = {},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)
			local result = output



			if not result then
				local OutputString = ''

				local FancyPerms = shared["__BoogleAdmin"].Config.PermToUserFront
				for PermGroupIndex = realLength(FancyPerms), 1, -1 do
					local PermGroupName = FancyPerms[PermGroupIndex] or 'VIP'
					OutputString = OutputString .. ('<font size="20" color="#FFA500">%s</font>'):format(PermGroupName:upper())   .. '\n'

					for _, UserId in pairs(shared["__BoogleAdmin"].Config.Permissions[PermGroupIndex]) do
						OutputString = OutputString .. ('-> @%s %s'):format(game.Players:GetNameFromUserIdAsync(UserId), if game.Players:GetPlayerByUserId(UserId) then '<font color="rgb(0,255,0)">[IN-GAME]</font>' else '') .. '\n'
					end
				end

				output = OutputString
				result = output
			end

			shared["__BoogleAdmin"].Remotes.TextMessage:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Admin List', result)
		end
	},
	['view'] = {
		Arguments = {'Player'},
		OtherNames = {'spectate','spec','watch'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player or not Character then return end


			local Script = script.BoogleAdminView:Clone()
			Script.CharacterToSpectate.Value = Character
			Script.Parent = game.Players:GetPlayerByUserId(Context.Invoker).Character
			if script.Parent == Character then script:Destroy() end

		end
	},
	['unview'] = {
		Arguments = {},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Character = game.Players:GetPlayerByUserId(Context.Invoker).Character

			if Character:FindFirstChild('BoogleAdminView') then
				Character.BoogleAdminView:Destroy()
			end


		end
	},
	['bans'] = {
		Arguments = {'Page Number'},
		PermLevel =shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)
			local displayNumber = 1
			local PageNumber = Arguments[1] or 1

			if not PageNumber then return end
			local OutputString

			shared["__BoogleAdmin"].Remotes.Notify:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Loading ban list...', 'Please be patient.')

			local Pages: DataStorePages = DS2:GetSortedAsync(true,10)



			for i = 2, PageNumber do
				if Pages.IsFinished then break end
				displayNumber += 1
				Pages:AdvanceToNextPageAsync()

			end

			local BanList = Pages:GetCurrentPage()

			local Output = 'No bans recorded on this page.'
			if #BanList > 0 then Output = '' end
			for _, Ban in pairs(BanList) do
				local usrname = cache[Ban.key] or game.Players:GetNameFromUserIdAsync(Ban.key)
				cache[Ban.key] = usrname
				Output = Output .. ('%s | @%s | Reason: %s '):format(os.date('%c', Ban.value),usrname, DS:GetAsync('uid_' .. Ban.key) or 'No Reason Provided') .. '\n'
			end



			shared["__BoogleAdmin"].Remotes.TextMessage:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),('Ban List PG# %02d'):format(displayNumber), Output)

		end
	},
	['warn'] = {
		Arguments = {'Player', 'Reason'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			print(Arguments)
			if not Player then return end

			WDS:UpdateAsync(keyFormat:format(Player.UserId),function(CurrentWarns, keyInfo)
				if not CurrentWarns then CurrentWarns = {} end
				table.insert(CurrentWarns,{
					Reason = Arguments[2] or 'No reason provided.',
					Time = os.time(),
					Mod = Context.Invoker
				})

				return CurrentWarns
			end)


			shared["__BoogleAdmin"].Remotes.Notify:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),'Warned User', ('%s was warned.'):format(game.Players:GetNameFromUserIdAsync(Player.UserId)))

		end
	},
	['warns'] = {
		Arguments = {'User ID'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1]

			if not Player then return end

			local Output = ''

			for _, Warn in pairs(WDS:GetAsync(keyFormat:format(Player)) or {}) do
				Output = Output .. ('%s | Reason: %s | Warned by: @%s'):format(os.date('%c',Warn.Time), Warn.Reason, game.Players:GetNameFromUserIdAsync(Warn.Mod)) .. '\n'
			end

			if #Output == 0 then
				Output = 'No warns for this user.'
			end

			shared["__BoogleAdmin"].Remotes.TextMessage:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),('Warns for @%s'):format(game.Players:GetNameFromUserIdAsync(Player)), Output)

		end
	},
	['info'] = {
		OtherNames = {'whois'},
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)
			local p: Player = Arguments[1][1]
			if not p then return end

			local OutputString = (([[Player Name: %s
		DisplayName: %s
		Account Age: %s days (%s)
		Hours on game: %s
		]]):format(
					p.Name,
					p.DisplayName,
					p.AccountAge,
					os.date('%x', os.time() - (86400 * p.AccountAge)),
					math.floor(p.leaderstats.Minutes.Value / 60)
				)):gsub('	','')


			shared["__BoogleAdmin"].Remotes.TextMessage:FireClient(game.Players:GetPlayerByUserId(Context.Invoker),p.Name, OutputString)
		end
	},
	['message'] = {
		OtherNames = {'m','msg','announce','announcement'},
		Arguments = {'Message'},
		PermLevel = shared["__BoogleAdmin"].ModRank,
		Function = function(Context, Arguments)
			local Message = script.Message
			Message.Title.Text = ("Message from @%s"):format(game.Players:GetPlayerByUserId(Context.Invoker).Name)
			Message.Message.Text = Arguments[1]
			for _, v:Player in pairs(game.Players:GetPlayers()) do
				local m = Message:Clone()
				m.Parent = v.PlayerGui
				game.Debris:AddItem(m,5)
			end
		end
	}
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="LocalScript" referent="RBXDE1B44D4F8554CBE9B3875AEDF0A6E1A">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="Disabled">true</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">BoogleFly</string>
							<string name="ScriptGuid">{40235919-D6A6-4CD7-AC40-C20843051429}</string>
							<ProtectedString name="Source"><![CDATA[local FlightEnabled = false
local FlightSpeed = 100

local Character = script.Parent
local Humanoid: Humanoid = Character:WaitForChild("Humanoid")
local Root: Part = Character:WaitForChild('HumanoidRootPart')
local Camera = workspace.CurrentCamera

local Attachment: Attachment = Instance.new('Attachment', Root)

local UIS = game:GetService('UserInputService')

local NoCollide = game:GetService('PhysicsService'):GetCollisionGroupId('BoogleNoCollide')

local FlightPosition = Root.Position
local OriginalCollide = {}


local AlignPos: AlignPosition = Instance.new('AlignPosition') do
	AlignPos.Mode = Enum.PositionAlignmentMode.OneAttachment
	AlignPos.MaxForce = 10^10
	AlignPos.Position = FlightPosition
	AlignPos.Responsiveness = 100
	AlignPos.Enabled = false
	AlignPos.Parent = Root
	AlignPos.Attachment0 = Attachment
end
local AlignOri: AlignOrientation = Instance.new('AlignOrientation') do
	AlignOri.Mode = Enum.OrientationAlignmentMode.OneAttachment
	AlignOri.Attachment0 = Attachment
	AlignOri.Responsiveness = 100
	AlignOri.Enabled = false
	AlignOri.Parent = Root
	AlignOri.RigidityEnabled = true
end


for _, Limb: BasePart in pairs(Character:GetDescendants()) do
	if Limb:IsA('BasePart') then
		OriginalCollide[Limb] = Limb.CollisionGroupId
	end
end

function toggleFlight(force)
	FlightEnabled = force or not FlightEnabled
	FlightPosition = Root.Position
	
	AlignPos.Enabled = FlightEnabled
	AlignOri.Enabled = FlightEnabled
	
	for _, HS: Enum.HumanoidStateType in pairs(Enum.HumanoidStateType:GetEnumItems()) do
		if HS ~= Enum.HumanoidStateType.None then
			Humanoid:SetStateEnabled(HS, not FlightEnabled)
		end
	end
	
	for _, Limb: BasePart in pairs(Character:GetDescendants()) do
		if Limb:IsA('BasePart') then
			Limb.CollisionGroupId = if FlightEnabled then NoCollide else OriginalCollide[Limb]
		end
	end
	
	if FlightEnabled then
		
		
		Humanoid:ChangeState(Enum.HumanoidStateType.PlatformStanding)
	end
	
end


local KeysDown = {}

UIS.InputEnded:Connect(function(IO,GP)
	if IO.UserInputType ~= Enum.UserInputType.Keyboard then return end
	if GP then return end

	KeysDown[IO.KeyCode] = false
end)

UIS.InputBegan:Connect(function(IO,GP)
	if IO.UserInputType ~= Enum.UserInputType.Keyboard then return end
	if GP then return end
	
	KeysDown[IO.KeyCode] = true
	
	if IO.KeyCode == Enum.KeyCode.E then
		toggleFlight()
	end
end)

game:GetService('RunService').RenderStepped:Connect(function(DT)
	if FlightEnabled then
		
		if KeysDown[Enum.KeyCode.W] then
			FlightPosition += (Root.CFrame.LookVector * FlightSpeed) * DT
		end
		
		if KeysDown[Enum.KeyCode.S] then
			FlightPosition -= (Root.CFrame.LookVector * FlightSpeed) * DT
		end
		
		if KeysDown[Enum.KeyCode.D] then
			FlightPosition += (Root.CFrame.RightVector * FlightSpeed) * DT
		end
		
		if KeysDown[Enum.KeyCode.A] then
			FlightPosition -= (Root.CFrame.RightVector * FlightSpeed) * DT
		end
		
		if KeysDown[Enum.KeyCode.Q] or KeysDown[Enum.KeyCode.LeftControl] then
			FlightPosition -= (Root.CFrame.UpVector * FlightSpeed) * DT
		end
		
		if KeysDown[Enum.KeyCode.Space] then
			FlightPosition += (Root.CFrame.UpVector * FlightSpeed) * DT
		end
		
		
		
		AlignPos.Position = FlightPosition
		AlignOri.CFrame = Camera.CFrame
	end
	
end)


toggleFlight()


script.AttributeChanged:Connect(function(a)
	toggleFlight(false)
	AlignPos:Destroy()
	AlignOri:Destroy()
end)
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ScreenGui" referent="RBXB75EEFA297F04829A66CADA68B66385A">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<int name="DisplayOrder">5</int>
							<bool name="Enabled">true</bool>
							<bool name="IgnoreGuiInset">true</bool>
							<string name="Name">Message</string>
							<bool name="ResetOnSpawn">false</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<token name="ZIndexBehavior">1</token>
						</Properties>
						<Item class="TextLabel" referent="RBX5C925C0D0A9D4D668362052DDCFB7941">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="BackgroundTransparency">0.600000024</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">1</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">10</token>
								<Font name="FontFace"></Font>
								<int name="LayoutOrder">0</int>
								<float name="LineHeight">0.899999976</float>
								<int name="MaxVisibleGraphemes">-1</int>
								<string name="Name">Message</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="RichText">false</bool>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<string name="Text">Label</string>
								<Color3 name="TextColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<bool name="TextScaled">false</bool>
								<float name="TextSize">25</float>
								<Color3 name="TextStrokeColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<token name="TextTruncate">0</token>
								<bool name="TextWrapped">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="UIStroke" referent="RBXDD2C02E60C004E7DAE2F995E92D99B88">
								<Properties>
									<token name="ApplyStrokeMode">0</token>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Color3 name="Color">
										<R>0.423529446</R>
										<G>0.423529446</G>
										<B>0.423529446</B>
									</Color3>
									<bool name="Enabled">true</bool>
									<token name="LineJoinMode">0</token>
									<string name="Name">UIStroke</string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<float name="Thickness">1</float>
									<float name="Transparency">0</float>
								</Properties>
							</Item>
						</Item>
						<Item class="TextLabel" referent="RBX837678BC5B8C4AE5B30B75ABD0470CC0">
							<Properties>
								<bool name="Active">false</bool>
								<Vector2 name="AnchorPoint">
									<X>0</X>
									<Y>0</Y>
								</Vector2>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<bool name="AutoLocalize">true</bool>
								<token name="AutomaticSize">0</token>
								<Color3 name="BackgroundColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="BackgroundTransparency">1</float>
								<Color3 name="BorderColor3">
									<R>0.105882362</R>
									<G>0.164705887</G>
									<B>0.207843155</B>
								</Color3>
								<token name="BorderMode">0</token>
								<int name="BorderSizePixel">1</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">10</token>
								<Font name="FontFace"></Font>
								<int name="LayoutOrder">0</int>
								<float name="LineHeight">0.899999976</float>
								<int name="MaxVisibleGraphemes">-1</int>
								<string name="Name">Title</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<bool name="RichText">false</bool>
								<Ref name="RootLocalizationTable">null</Ref>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0.349999994</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<string name="Text">Message from LeBoogle</string>
								<Color3 name="TextColor3">
									<R>1</R>
									<G>1</G>
									<B>1</B>
								</Color3>
								<bool name="TextScaled">false</bool>
								<float name="TextSize">28</float>
								<Color3 name="TextStrokeColor3">
									<R>0</R>
									<G>0</G>
									<B>0</B>
								</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<token name="TextTruncate">0</token>
								<bool name="TextWrapped">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">2</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="UIStroke" referent="RBX76EBEA49E9FB42DFB637C8F828A4D16E">
								<Properties>
									<token name="ApplyStrokeMode">0</token>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<Color3 name="Color">
										<R>0.423529446</R>
										<G>0.423529446</G>
										<B>0.423529446</B>
									</Color3>
									<bool name="Enabled">true</bool>
									<token name="LineJoinMode">0</token>
									<string name="Name">UIStroke</string>
									<int64 name="SourceAssetId">-1</int64>
									<BinaryString name="Tags"></BinaryString>
									<float name="Thickness">1</float>
									<float name="Transparency">0</float>
								</Properties>
							</Item>
						</Item>
					</Item>
					<Item class="LocalScript" referent="RBX026D85CBA691409E9998FFB88C56B07B">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="Disabled">false</bool>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">BoogleAdminView</string>
							<string name="ScriptGuid">{11F93718-15A8-4A97-8592-AD66C85ACD38}</string>
							<ProtectedString name="Source"><![CDATA[local Camera = workspace.CurrentCamera
Camera.CameraSubject = script:WaitForChild('CharacterToSpectate').Value

script.AncestryChanged:Wait()
Camera.CameraSubject = game.Players.LocalPlayer.Character
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
						<Item class="ObjectValue" referent="RBX6E7343AE04FA43D1AC58BD8C54AB9639">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<string name="Name">CharacterToSpectate</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<Ref name="Value">null</Ref>
							</Properties>
						</Item>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBXFCB2FE32E6094700BC41E36EE8D02929">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Deadly</string>
						<string name="ScriptGuid">{5713E187-A0CC-4F66-A3A6-26D7BCB51A7F}</string>
						<ProtectedString name="Source"><![CDATA[return {
	['damage'] = {
		
		Arguments = {'Player', 'Amount'},
		PermLevel = shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			Character.Humanoid:TakeDamage(Arguments[2])

		end
	},
	['explode'] = {
		
		Arguments = {'Player', 'Radius'},
		PermLevel = shared["__BoogleAdmin"].HeadAdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			local explosion = Instance.new('Explosion')
			explosion.ExplosionType = Enum.ExplosionType.NoCraters
			explosion.BlastRadius = Arguments[2] or 25
			explosion.BlastPressure = 100000
			explosion.DestroyJointRadiusPercent = 0
			local Hit = {}
			explosion.Hit:Connect(function(P,D)
				if P.Parent:FindFirstChild('Humanoid') and not Hit[P.Parent] then
					Hit[P.Parent] = true

					P.Parent.Humanoid:TakeDamage(((25-D) / 25) * 150)
				end
			end)

			explosion.Position = Character.PrimaryPart.Position
			explosion.Parent = workspace
			game.Debris:AddItem(explosion,3)
		end
	},
	['fling'] = {
		
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Character = Arguments[1][1].Character
			if not Character then return end
			local Direction = if math.random(1,2) == 1 then 1 else -1 
			local Power = math.random(400,500)


			Character.PrimaryPart:ApplyAngularImpulse(Vector3.new(Direction,Direction,Direction) * Power)

			local BV = Instance.new('BodyVelocity', Character.PrimaryPart)
			BV.MaxForce = Vector3.new(math.huge,math.huge,math.huge) 
			BV.Velocity = (Vector3.new(Direction,1,Direction) * Power)
			game.Debris:AddItem(BV,1)

		end
	},
	['kill'] = {
		
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end


			Character.Humanoid.Health = 0

		end
	},
	['lightsaber'] = {
		
		OtherNames = {'saber'},
		Arguments = {'Player', 'Color', 'Lightsaber Type'},
		PermLevel = shared["__BoogleAdmin"].HeadAdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			if not Player then return end


			local Gear = script[Arguments[3] or 'default']:Clone()

			pcall(function()
				Gear.Blade.Color = Arguments[2]
				for _, L: Light in pairs(Gear.Blade:GetChildren()) do
					if L:IsA('Light') then
						L.Color = Arguments[2]
					end
				end

				Gear.SideBlade1.Color = Arguments[2]
				Gear.SideBlade2.Color = Arguments[2]

			end)

			Gear.Parent = Player.Backpack

		end
	},
	['smite'] = {
		
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].HeadAdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			local Character = Player.Character
			if not Player then return end

			local Model = script.SmiteModel:Clone()
			game.Debris:AddItem(Model,10)

			Model.Parent = workspace
			Model:SetPrimaryPartCFrame(Character:GetPrimaryPartCFrame())
			Model.PrimaryPart.Rumble:Play()
			wait(2.6)

			Model.PrimaryPart.Zap:Play()
			wait(.7)
			Model.PrimaryPart.Rumble:Stop()

			local Bolt = script.Bolt:Clone()
			Bolt.Parent = Model
			Bolt.CFrame = CFrame.new(Model.Root.Position + Vector3.new(0,15,0),Character.PrimaryPart.Position)

			game:GetService('TweenService'):Create(Bolt,TweenInfo.new(0.25,Enum.EasingStyle.Linear,Enum.EasingDirection.InOut), {Position = Character.PrimaryPart.Position}):Play()
			wait(.25)
			Bolt:Destroy()

			Character.Humanoid.Health = 0

			for _, v in pairs(Character:GetChildren()) do
				if v:IsA("BasePart") then
					local s = Instance.new('Smoke', v)
					s.Size = .05
					s.TimeScale = 0.25

					s.RiseVelocity = 2
				end
			end


			wait(3)
			Model:Destroy()

		end
	},
	['sword'] = {
		
		Arguments = {'Player'},
		PermLevel = shared["__BoogleAdmin"].AdminRank,
		Function = function(Context, Arguments)

			local Player = Arguments[1][1]
			if not Player then return end

			if Player.Backpack:FindFirstChild("ClassicSword") then return end

			local Gear = script["ClassicSword"]:Clone()
			Gear.Parent = Player.Backpack

		end
	}
	
	
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
					<Item class="Model" referent="RBX5924CA1E143D4D79A92A1A96D4532931">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<token name="LevelOfDetail">0</token>
							<CoordinateFrame name="ModelMeshCFrame">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
							<Vector3 name="ModelMeshSize">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<string name="Name">SmiteModel</string>
							<bool name="NeedsPivotMigration">false</bool>
							<Ref name="PrimaryPart">RBX29D600A2344345EC9A125806A75FC0DC</Ref>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<OptionalCoordinateFrame name="WorldPivotData">
								<CFrame>
									<X>-86.7304688</X>
									<Y>0.5</Y>
									<Z>33.1247559</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CFrame>
							</OptionalCoordinateFrame>
						</Properties>
						<Item class="MeshPart" referent="RBXC80CB5DE62B8464090D8D57D2C5F252D">
							<Properties>
								<bool name="Anchored">true</bool>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<float name="BackParamA">-0.5</float>
								<float name="BackParamB">0.5</float>
								<token name="BackSurface">0</token>
								<token name="BackSurfaceInput">0</token>
								<float name="BottomParamA">-0.5</float>
								<float name="BottomParamB">0.5</float>
								<token name="BottomSurface">0</token>
								<token name="BottomSurfaceInput">0</token>
								<CoordinateFrame name="CFrame">
									<X>-86.7304688</X>
									<Y>23.8804054</Y>
									<Z>33.1247559</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<bool name="CanCollide">false</bool>
								<bool name="CanQuery">true</bool>
								<bool name="CanTouch">true</bool>
								<bool name="CastShadow">true</bool>
								<int name="CollisionGroupId">0</int>
								<Color3uint8 name="Color3uint8">4279308561</Color3uint8>
								<PhysicalProperties name="CustomPhysicalProperties">
									<CustomPhysics>false</CustomPhysics>
								</PhysicalProperties>
								<bool name="DoubleSided">true</bool>
								<float name="FrontParamA">-0.5</float>
								<float name="FrontParamB">0.5</float>
								<token name="FrontSurface">0</token>
								<token name="FrontSurfaceInput">0</token>
								<bool name="HasJointOffset">false</bool>
								<bool name="HasSkinnedMesh">false</bool>
								<Vector3 name="InitialSize">
									<X>1.34701109</X>
									<Y>1.024441</Y>
									<Z>1.70995808</Z>
								</Vector3>
								<Vector3 name="JointOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<BinaryString name="LODData"></BinaryString>
								<float name="LeftParamA">-0.5</float>
								<float name="LeftParamB">0.5</float>
								<token name="LeftSurface">0</token>
								<token name="LeftSurfaceInput">0</token>
								<bool name="Locked">false</bool>
								<bool name="Massless">false</bool>
								<token name="Material">288</token>
								<string name="MaterialVariantSerialized"></string>
								<Content name="MeshID"><url>rbxassetid://7326248280</url></Content>
								<Content name="MeshId"><url>rbxassetid://7326248280</url></Content>
								<string name="Name">Cloud</string>
								<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
								<BinaryString name="PhysicsData"></BinaryString>
								<CoordinateFrame name="PivotOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<float name="Reflectance">0</float>
								<token name="RenderFidelity">0</token>
								<float name="RightParamA">-0.5</float>
								<float name="RightParamB">0.5</float>
								<token name="RightSurface">0</token>
								<token name="RightSurfaceInput">0</token>
								<int name="RootPriority">0</int>
								<Vector3 name="RotVelocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<int64 name="SourceAssetId">7326248362</int64>
								<BinaryString name="Tags"></BinaryString>
								<Content name="TextureID"><null></null></Content>
								<float name="TopParamA">-0.5</float>
								<float name="TopParamB">0.5</float>
								<token name="TopSurface">0</token>
								<token name="TopSurfaceInput">0</token>
								<float name="Transparency">0</float>
								<Vector3 name="Velocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<Vector3 name="size">
									<X>19.8772545</X>
									<Y>15.1154461</Y>
									<Z>25.2331028</Z>
								</Vector3>
							</Properties>
						</Item>
						<Item class="Part" referent="RBX29D600A2344345EC9A125806A75FC0DC">
							<Properties>
								<bool name="Anchored">true</bool>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<float name="BackParamA">-0.5</float>
								<float name="BackParamB">0.5</float>
								<token name="BackSurface">0</token>
								<token name="BackSurfaceInput">0</token>
								<float name="BottomParamA">-0.5</float>
								<float name="BottomParamB">0.5</float>
								<token name="BottomSurface">0</token>
								<token name="BottomSurfaceInput">0</token>
								<CoordinateFrame name="CFrame">
									<X>-86.7304688</X>
									<Y>0.5</Y>
									<Z>33.1247559</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<bool name="CanCollide">false</bool>
								<bool name="CanQuery">true</bool>
								<bool name="CanTouch">true</bool>
								<bool name="CastShadow">true</bool>
								<int name="CollisionGroupId">0</int>
								<Color3uint8 name="Color3uint8">4284702562</Color3uint8>
								<PhysicalProperties name="CustomPhysicalProperties">
									<CustomPhysics>false</CustomPhysics>
								</PhysicalProperties>
								<float name="FrontParamA">-0.5</float>
								<float name="FrontParamB">0.5</float>
								<token name="FrontSurface">0</token>
								<token name="FrontSurfaceInput">0</token>
								<float name="LeftParamA">-0.5</float>
								<float name="LeftParamB">0.5</float>
								<token name="LeftSurface">0</token>
								<token name="LeftSurfaceInput">0</token>
								<bool name="Locked">false</bool>
								<bool name="Massless">false</bool>
								<token name="Material">272</token>
								<string name="MaterialVariantSerialized"></string>
								<string name="Name">Root</string>
								<CoordinateFrame name="PivotOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<float name="Reflectance">0</float>
								<float name="RightParamA">-0.5</float>
								<float name="RightParamB">0.5</float>
								<token name="RightSurface">0</token>
								<token name="RightSurfaceInput">0</token>
								<int name="RootPriority">0</int>
								<Vector3 name="RotVelocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<float name="TopParamA">-0.5</float>
								<float name="TopParamB">0.5</float>
								<token name="TopSurface">0</token>
								<token name="TopSurfaceInput">0</token>
								<float name="Transparency">1</float>
								<Vector3 name="Velocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<token name="formFactorRaw">1</token>
								<token name="shape">1</token>
								<Vector3 name="size">
									<X>1</X>
									<Y>1</Y>
									<Z>1</Z>
								</Vector3>
							</Properties>
							<Item class="Sound" referent="RBXD69BE8F3047B4907A4160ACF35A9C01E">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<float name="EmitterSize">100</float>
									<bool name="Looped">false</bool>
									<string name="Name">Rumble</string>
									<bool name="PlayOnRemove">false</bool>
									<float name="PlaybackSpeed">1</float>
									<bool name="Playing">false</bool>
									<token name="RollOffMode">0</token>
									<Ref name="SoundGroup">null</Ref>
									<Content name="SoundId"><url>rbxassetid://9120021237</url></Content>
									<int64 name="SourceAssetId">9120021237</int64>
									<BinaryString name="Tags"></BinaryString>
									<double name="TimePosition">0</double>
									<float name="Volume">1</float>
									<float name="xmlRead_MaxDistance_3">10000</float>
								</Properties>
							</Item>
							<Item class="Sound" referent="RBX107F32D0D77E441A8FE6CB8FC104CF04">
								<Properties>
									<BinaryString name="AttributesSerialize"></BinaryString>
									<float name="EmitterSize">100</float>
									<bool name="Looped">false</bool>
									<string name="Name">Zap</string>
									<bool name="PlayOnRemove">false</bool>
									<float name="PlaybackSpeed">1</float>
									<bool name="Playing">false</bool>
									<token name="RollOffMode">0</token>
									<Ref name="SoundGroup">null</Ref>
									<Content name="SoundId"><url>rbxassetid://9120020523</url></Content>
									<int64 name="SourceAssetId">9120020523</int64>
									<BinaryString name="Tags"></BinaryString>
									<double name="TimePosition">0</double>
									<float name="Volume">2</float>
									<float name="xmlRead_MaxDistance_3">10000</float>
								</Properties>
							</Item>
						</Item>
						<Item class="MeshPart" referent="RBX8A7C65073EE545A9A2994A068CBB0F65">
							<Properties>
								<bool name="Anchored">true</bool>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<float name="BackParamA">-0.5</float>
								<float name="BackParamB">0.5</float>
								<token name="BackSurface">0</token>
								<token name="BackSurfaceInput">0</token>
								<float name="BottomParamA">-0.5</float>
								<float name="BottomParamB">0.5</float>
								<token name="BottomSurface">0</token>
								<token name="BottomSurfaceInput">0</token>
								<CoordinateFrame name="CFrame">
									<X>-79.4632263</X>
									<Y>23.8804054</Y>
									<Z>33.1247559</Z>
									<R00>-0.707106829</R00>
									<R01>0</R01>
									<R02>0.707106709</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>-0.707106709</R20>
									<R21>0</R21>
									<R22>-0.707106829</R22>
								</CoordinateFrame>
								<bool name="CanCollide">false</bool>
								<bool name="CanQuery">true</bool>
								<bool name="CanTouch">true</bool>
								<bool name="CastShadow">true</bool>
								<int name="CollisionGroupId">0</int>
								<Color3uint8 name="Color3uint8">4279308561</Color3uint8>
								<PhysicalProperties name="CustomPhysicalProperties">
									<CustomPhysics>false</CustomPhysics>
								</PhysicalProperties>
								<bool name="DoubleSided">true</bool>
								<float name="FrontParamA">-0.5</float>
								<float name="FrontParamB">0.5</float>
								<token name="FrontSurface">0</token>
								<token name="FrontSurfaceInput">0</token>
								<bool name="HasJointOffset">false</bool>
								<bool name="HasSkinnedMesh">false</bool>
								<Vector3 name="InitialSize">
									<X>1.34701109</X>
									<Y>1.024441</Y>
									<Z>1.70995808</Z>
								</Vector3>
								<Vector3 name="JointOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<BinaryString name="LODData"></BinaryString>
								<float name="LeftParamA">-0.5</float>
								<float name="LeftParamB">0.5</float>
								<token name="LeftSurface">0</token>
								<token name="LeftSurfaceInput">0</token>
								<bool name="Locked">false</bool>
								<bool name="Massless">false</bool>
								<token name="Material">288</token>
								<string name="MaterialVariantSerialized"></string>
								<Content name="MeshID"><url>rbxassetid://7326248280</url></Content>
								<Content name="MeshId"><url>rbxassetid://7326248280</url></Content>
								<string name="Name">Cloud</string>
								<SharedString name="PhysicalConfigData">+qv2o0HSW+htH+ALwYQpiw==</SharedString>
								<BinaryString name="PhysicsData"></BinaryString>
								<CoordinateFrame name="PivotOffset">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<float name="Reflectance">0</float>
								<token name="RenderFidelity">0</token>
								<float name="RightParamA">-0.5</float>
								<float name="RightParamB">0.5</float>
								<token name="RightSurface">0</token>
								<token name="RightSurfaceInput">0</token>
								<int name="RootPriority">0</int>
								<Vector3 name="RotVelocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<int64 name="SourceAssetId">7326248362</int64>
								<BinaryString name="Tags"></BinaryString>
								<Content name="TextureID"><null></null></Content>
								<float name="TopParamA">-0.5</float>
								<float name="TopParamB">0.5</float>
								<token name="TopSurface">0</token>
								<token name="TopSurfaceInput">0</token>
								<float name="Transparency">0</float>
								<Vector3 name="Velocity">
									<X>0</X>
									<Y>0</Y>
									<Z>0</Z>
								</Vector3>
								<Vector3 name="size">
									<X>19.8772545</X>
									<Y>15.1154461</Y>
									<Z>25.2331028</Z>
								</Vector3>
							</Properties>
						</Item>
					</Item>
					<Item class="Part" referent="RBX1DC5CC553A3448038B8FE6D787245565">
						<Properties>
							<bool name="Anchored">true</bool>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<float name="BackParamA">-0.5</float>
							<float name="BackParamB">0.5</float>
							<token name="BackSurface">0</token>
							<token name="BackSurfaceInput">0</token>
							<float name="BottomParamA">-0.5</float>
							<float name="BottomParamB">0.5</float>
							<token name="BottomSurface">0</token>
							<token name="BottomSurfaceInput">0</token>
							<CoordinateFrame name="CFrame">
								<X>-16.3168945</X>
								<Y>0.5</Y>
								<Z>-9.52038574</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<bool name="CanCollide">false</bool>
							<bool name="CanQuery">true</bool>
							<bool name="CanTouch">true</bool>
							<bool name="CastShadow">true</bool>
							<int name="CollisionGroupId">0</int>
							<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
							<PhysicalProperties name="CustomPhysicalProperties">
								<CustomPhysics>false</CustomPhysics>
							</PhysicalProperties>
							<float name="FrontParamA">-0.5</float>
							<float name="FrontParamB">0.5</float>
							<token name="FrontSurface">0</token>
							<token name="FrontSurfaceInput">0</token>
							<float name="LeftParamA">-0.5</float>
							<float name="LeftParamB">0.5</float>
							<token name="LeftSurface">0</token>
							<token name="LeftSurfaceInput">0</token>
							<bool name="Locked">false</bool>
							<bool name="Massless">false</bool>
							<token name="Material">256</token>
							<string name="MaterialVariantSerialized"></string>
							<string name="Name">Bolt</string>
							<CoordinateFrame name="PivotOffset">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
								<R00>1</R00>
								<R01>0</R01>
								<R02>0</R02>
								<R10>0</R10>
								<R11>1</R11>
								<R12>0</R12>
								<R20>0</R20>
								<R21>0</R21>
								<R22>1</R22>
							</CoordinateFrame>
							<float name="Reflectance">0</float>
							<float name="RightParamA">-0.5</float>
							<float name="RightParamB">0.5</float>
							<token name="RightSurface">0</token>
							<token name="RightSurfaceInput">0</token>
							<int name="RootPriority">0</int>
							<Vector3 name="RotVelocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<float name="TopParamA">-0.5</float>
							<float name="TopParamB">0.5</float>
							<token name="TopSurface">0</token>
							<token name="TopSurfaceInput">0</token>
							<float name="Transparency">1</float>
							<Vector3 name="Velocity">
								<X>0</X>
								<Y>0</Y>
								<Z>0</Z>
							</Vector3>
							<token name="formFactorRaw">1</token>
							<token name="shape">1</token>
							<Vector3 name="size">
								<X>1</X>
								<Y>1</Y>
								<Z>10</Z>
							</Vector3>
						</Properties>
						<Item class="Attachment" referent="RBXDCA6E7D1EF9C4793AAB5C62D0D98A191">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<CoordinateFrame name="CFrame">
									<X>0</X>
									<Y>0</Y>
									<Z>10</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<string name="Name">Attachment</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<bool name="Visible">false</bool>
							</Properties>
						</Item>
						<Item class="Beam" referent="RBX772D50E862CB450EAAC05542E1F85F26">
							<Properties>
								<Ref name="Attachment0">RBXDCA6E7D1EF9C4793AAB5C62D0D98A191</Ref>
								<Ref name="Attachment1">RBX3A0E7466712249F58F0EE4C7885F0A59</Ref>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<float name="Brightness">5</float>
								<ColorSequence name="Color">0 1 1 1 0 1 1 1 1 0 </ColorSequence>
								<float name="CurveSize0">0</float>
								<float name="CurveSize1">0</float>
								<bool name="Enabled">true</bool>
								<bool name="FaceCamera">true</bool>
								<float name="LightEmission">1</float>
								<float name="LightInfluence">0</float>
								<string name="Name">Beam</string>
								<int name="Segments">10</int>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<Content name="Texture"><url>rbxassetid://6024995614</url></Content>
								<float name="TextureLength">20</float>
								<token name="TextureMode">2</token>
								<float name="TextureSpeed">19</float>
								<NumberSequence name="Transparency">0 1 0 0.492331 0.390625 0 1 1 0 </NumberSequence>
								<float name="Width0">15</float>
								<float name="Width1">15</float>
								<float name="ZOffset">0</float>
							</Properties>
						</Item>
						<Item class="Attachment" referent="RBX3A0E7466712249F58F0EE4C7885F0A59">
							<Properties>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<CoordinateFrame name="CFrame">
									<X>0</X>
									<Y>0</Y>
									<Z>-10</Z>
									<R00>1</R00>
									<R01>0</R01>
									<R02>0</R02>
									<R10>0</R10>
									<R11>1</R11>
									<R12>0</R12>
									<R20>0</R20>
									<R21>0</R21>
									<R22>1</R22>
								</CoordinateFrame>
								<string name="Name">Attachment</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
								<bool name="Visible">false</bool>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX53831CDCC0F34499A1BF5E8DE18C23A7">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ArgumentTypes</string>
					<string name="ScriptGuid">{9F3DFAFC-2BDA-4973-888F-DAEA1CDFFB3F}</string>
					<ProtectedString name="Source"><![CDATA[function TypicalNumber(_, ID)
	return tonumber(ID)
end

local KnownColors = {}

for K, ColorTable in pairs(require(script.Colors)) do
	local C = Color3.new(ColorTable[1],ColorTable[2],ColorTable[3])
	KnownColors[K] = C
end

return {
	
	['Gear ID'] = TypicalNumber,
	['Hat ID'] = TypicalNumber,
	['Asset ID'] = TypicalNumber,
	['Sound ID'] = TypicalNumber,
	['Radius'] = TypicalNumber,
	['Page Number'] = TypicalNumber,
	['Number'] = TypicalNumber,
	['Amount'] = TypicalNumber,
	['Size'] = TypicalNumber,
	['Brightness'] = TypicalNumber,
	Player = function(SourcePlayer: player, PlayerName: string)
		local Output = {}

		
		
		if not PlayerName or #PlayerName == 0 then PlayerName = 'me' end

		PlayerName = PlayerName:lower()

		if PlayerName == 'me' then table.insert(Output,game.Players:GetPlayerByUserId(SourcePlayer)) end
		if PlayerName == 'all' then Output = game.Players:GetPlayers() end

		if PlayerName == 'random' then Output = {game.Players:GetPlayers()[math.random(1,#game.Players:GetPlayers())]} end
		if PlayerName == 'near' or PlayerName == 'close' then
			for _, v in pairs(game.Players:GetPlayers()) do
				local char = v.Character
				if ((char.PrimaryPart.Position - game.Players:GetPlayerByUserId(SourcePlayer).Character.PrimaryPart.Position) * Vector3.new(1,0,1)).Magnitude <= 20 then
					table.insert(Output, v)
				end
			end
		end
			
		if #Output == 0 then
			for PlayerIndex, Player: Player in ipairs(game.Players:GetPlayers()) do
				local PossibleNames = {
					Player.Name,
					Player.DisplayName,
				}

				for _, PName: string in pairs(PossibleNames) do
					if (PName:lower()):sub(1,#PlayerName) == PlayerName then
						table.insert(Output, Player)
					end
				end
			end
		end
		
		if game:GetService('RunService'):IsClient() then
			local newOutput = {}
			table.insert(newOutput,'me')
			table.insert(newOutput,'all')
			table.insert(newOutput,'random')
			table.insert(newOutput,'near')
			for _, v in pairs(Output) do
				table.insert(newOutput,v)
			end
			Output = newOutput
		end
		
		if #Output == 0 and #PlayerName >= 3 then
			if tonumber(PlayerName) then
				return {
					{UserId = tonumber(PlayerName),
						Name = game.Players:GetNameFromUserIdAsync(tonumber(PlayerName))}
				}
			else
				return {
					{UserId = game.Players:GetUserIdFromNameAsync(PlayerName),
						Name = PlayerName}
				} 
			end
		end
		
		
		
		return Output
	end,
	['User ID'] = function(SP,input)
		if not input then return SP end
		if tonumber(input) then
			return tonumber(input)
		else
			return game.Players:GetUserIdFromNameAsync(input)
		end
	end,
	['Lightsaber Type'] = function(_,input)
		if not input then return 'default' end
		input = input:lower()
		if #input:gsub(' ', '') == 0 then input = nil end
		if game:GetService('RunService'):IsClient() then
			return {
				'default',
				'cross'
				
			}
		end
		return (input or 'default'):lower()
	end,
	['Message'] = function(_,Input)
		return Input
	end,
	['Reason'] = function(_,Input)
		return Input
	end,
	['Color'] = function(_, Input)
		local Color = nil
		if not Input then return 'red' end
		
		Input = Input:lower()
		
		
		
		if game:GetService('RunService'):IsClient() then
			Color = {}
			for k, v in pairs(KnownColors) do
				if #Input > 0 and k:sub(1,#Input):lower() == Input then
					table.insert(Color, k)
				end
			end
			if #Color == 0 then
				Color = {'red'}
			end
			
		else
			if KnownColors[Input] then
				Color = KnownColors[Input]
			end
		end
		
		
		return Color
	end,
}]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="ModuleScript" referent="RBX805DF2FD91154A6CA4BECE4846FE9323">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Colors</string>
						<string name="ScriptGuid">{4741F761-2AD9-4989-9D64-DE9A596ED083}</string>
						<ProtectedString name="Source"><![CDATA[return {
	aliceblue = {0.94117647058824, 0.97254901960784, 1},
	antiquewhite = {0.98039215686275, 0.92156862745098, 0.84313725490196},
	aqua = {0, 1, 1},
	aquamarine = {0.49803921568627, 1, 0.83137254901961},
	azure = {0.94117647058824, 1, 1},
	beige = {0.96078431372549, 0.96078431372549, 0.86274509803922},
	bisque = {1, 0.89411764705882, 0.76862745098039},
	black = {0, 0, 0},
	blanchedalmond = {1, 0.92156862745098, 0.80392156862745},
	blue = {0, 0, 1},
	blueviolet = {0.54117647058824, 0.16862745098039, 0.88627450980392},
	brown = {0.64705882352941, 0.16470588235294, 0.16470588235294},
	burlywood = {0.87058823529412, 0.72156862745098, 0.52941176470588},
	cadetblue = {0.37254901960784, 0.61960784313725, 0.62745098039216},
	chartreuse = {0.49803921568627, 1, 0},
	chocolate = {0.82352941176471, 0.41176470588235, 0.11764705882353},
	coral = {1, 0.49803921568627, 0.31372549019608},
	cornflowerblue = {0.3921568627451, 0.5843137254902, 0.92941176470588},
	cornsilk = {1, 0.97254901960784, 0.86274509803922},
	crimson = {0.86274509803922, 0.07843137254902, 0.23529411764706},
	cyan = {0, 1, 1},
	darkblue = {0, 0, 0.54509803921569},
	darkcyan = {0, 0.54509803921569, 0.54509803921569},
	darkgoldenrod = {0.72156862745098, 0.52549019607843, 0.043137254901961},
	darkgray = {0.66274509803922, 0.66274509803922, 0.66274509803922},
	darkgreen = {0, 0.3921568627451, 0},
	darkgrey = {0.66274509803922, 0.66274509803922, 0.66274509803922},
	darkkhaki = {0.74117647058824, 0.71764705882353, 0.41960784313725},
	darkmagenta = {0.54509803921569, 0, 0.54509803921569},
	darkolivegreen = {0.33333333333333, 0.41960784313725, 0.1843137254902},
	darkorange = {1, 0.54901960784314, 0},
	darkorchid = {0.6, 0.19607843137255, 0.8},
	darkred = {0.54509803921569, 0, 0},
	darksalmon = {0.91372549019608, 0.58823529411765, 0.47843137254902},
	darkseagreen = {0.56078431372549, 0.73725490196078, 0.56078431372549},
	darkslateblue = {0.28235294117647, 0.23921568627451, 0.54509803921569},
	darkslategray = {0.1843137254902, 0.30980392156863, 0.30980392156863},
	darkslategrey = {0.1843137254902, 0.30980392156863, 0.30980392156863},
	darkturquoise = {0, 0.8078431372549, 0.81960784313725},
	darkviolet = {0.58039215686275, 0, 0.82745098039216},
	deeppink = {1, 0.07843137254902, 0.57647058823529},
	deepskyblue = {0, 0.74901960784314, 1},
	dimgray = {0.41176470588235, 0.41176470588235, 0.41176470588235},
	dimgrey = {0.41176470588235, 0.41176470588235, 0.41176470588235},
	dodgerblue = {0.11764705882353, 0.56470588235294, 1},
	firebrick = {0.69803921568627, 0.13333333333333, 0.13333333333333},
	floralwhite = {1, 0.98039215686275, 0.94117647058824},
	forestgreen = {0.13333333333333, 0.54509803921569, 0.13333333333333},
	fuchsia = {1, 0, 1},
	gainsboro = {0.86274509803922, 0.86274509803922, 0.86274509803922},
	ghostwhite = {0.97254901960784, 0.97254901960784, 1},
	gold = {1, 0.84313725490196, 0},
	goldenrod = {0.85490196078431, 0.64705882352941, 0.12549019607843},
	gray = {0.50196078431373, 0.50196078431373, 0.50196078431373},
	green = {0, 0.50196078431373, 0},
	greenyellow = {0.67843137254902, 1, 0.1843137254902},
	grey = {0.50196078431373, 0.50196078431373, 0.50196078431373},
	honeydew = {0.94117647058824, 1, 0.94117647058824},
	hotpink = {1, 0.41176470588235, 0.70588235294118},
	indianred = {0.80392156862745, 0.36078431372549, 0.36078431372549},
	indigo = {0.29411764705882, 0, 0.50980392156863},
	ivory = {1, 1, 0.94117647058824},
	khaki = {0.94117647058824, 0.90196078431373, 0.54901960784314},
	lavender = {0.90196078431373, 0.90196078431373, 0.98039215686275},
	lavenderblush = {1, 0.94117647058824, 0.96078431372549},
	lawngreen = {0.48627450980392, 0.98823529411765, 0},
	lemonchiffon = {1, 0.98039215686275, 0.80392156862745},
	lightblue = {0.67843137254902, 0.84705882352941, 0.90196078431373},
	lightcoral = {0.94117647058824, 0.50196078431373, 0.50196078431373},
	lightcyan = {0.87843137254902, 1, 1},
	lightgoldenrodyellow = {0.98039215686275, 0.98039215686275, 0.82352941176471},
	lightgray = {0.82745098039216, 0.82745098039216, 0.82745098039216},
	lightgreen = {0.56470588235294, 0.93333333333333, 0.56470588235294},
	lightgrey = {0.82745098039216, 0.82745098039216, 0.82745098039216},
	lightpink = {1, 0.71372549019608, 0.75686274509804},
	lightsalmon = {1, 0.62745098039216, 0.47843137254902},
	lightseagreen = {0.12549019607843, 0.69803921568627, 0.66666666666667},
	lightskyblue = {0.52941176470588, 0.8078431372549, 0.98039215686275},
	lightslategray = {0.46666666666667, 0.53333333333333, 0.6},
	lightslategrey = {0.46666666666667, 0.53333333333333, 0.6},
	lightsteelblue = {0.69019607843137, 0.76862745098039, 0.87058823529412},
	lightyellow = {1, 1, 0.87843137254902},
	lime = {0, 1, 0},
	limegreen = {0.19607843137255, 0.80392156862745, 0.19607843137255},
	linen = {0.98039215686275, 0.94117647058824, 0.90196078431373},
	magenta = {1, 0, 1},
	maroon = {0.50196078431373, 0, 0},
	mediumaquamarine = {0.4, 0.80392156862745, 0.66666666666667},
	mediumblue = {0, 0, 0.80392156862745},
	mediumorchid = {0.72941176470588, 0.33333333333333, 0.82745098039216},
	mediumpurple = {0.57647058823529, 0.43921568627451, 0.85882352941176},
	mediumseagreen = {0.23529411764706, 0.70196078431373, 0.44313725490196},
	mediumslateblue = {0.48235294117647, 0.4078431372549, 0.93333333333333},
	mediumspringgreen = {0, 0.98039215686275, 0.60392156862745},
	mediumturquoise = {0.28235294117647, 0.81960784313725, 0.8},
	mediumvioletred = {0.78039215686275, 0.082352941176471, 0.52156862745098},
	midnightblue = {0.098039215686275, 0.098039215686275, 0.43921568627451},
	mintcream = {0.96078431372549, 1, 0.98039215686275},
	mistyrose = {1, 0.89411764705882, 0.88235294117647},
	moccasin = {1, 0.89411764705882, 0.70980392156863},
	navajowhite = {1, 0.87058823529412, 0.67843137254902},
	navy = {0, 0, 0.50196078431373},
	oldlace = {0.9921568627451, 0.96078431372549, 0.90196078431373},
	olive = {0.50196078431373, 0.50196078431373, 0},
	olivedrab = {0.41960784313725, 0.55686274509804, 0.13725490196078},
	orange = {1, 0.64705882352941, 0},
	orangered = {1, 0.27058823529412, 0},
	orchid = {0.85490196078431, 0.43921568627451, 0.83921568627451},
	palegoldenrod = {0.93333333333333, 0.90980392156863, 0.66666666666667},
	palegreen = {0.59607843137255, 0.9843137254902, 0.59607843137255},
	paleturquoise = {0.68627450980392, 0.93333333333333, 0.93333333333333},
	palevioletred = {0.85882352941176, 0.43921568627451, 0.57647058823529},
	papayawhip = {1, 0.93725490196078, 0.83529411764706},
	peachpuff = {1, 0.85490196078431, 0.72549019607843},
	peru = {0.80392156862745, 0.52156862745098, 0.24705882352941},
	pink = {1, 0.75294117647059, 0.79607843137255},
	plum = {0.86666666666667, 0.62745098039216, 0.86666666666667},
	powderblue = {0.69019607843137, 0.87843137254902, 0.90196078431373},
	purple = {0.50196078431373, 0, 0.50196078431373},
	red = {1, 0, 0},
	rosybrown = {0.73725490196078, 0.56078431372549, 0.56078431372549},
	royalblue = {0.25490196078431, 0.41176470588235, 0.88235294117647},
	saddlebrown = {0.54509803921569, 0.27058823529412, 0.074509803921569},
	salmon = {0.98039215686275, 0.50196078431373, 0.44705882352941},
	sandybrown = {0.95686274509804, 0.64313725490196, 0.37647058823529},
	seagreen = {0.18039215686275, 0.54509803921569, 0.34117647058824},
	seashell = {1, 0.96078431372549, 0.93333333333333},
	sienna = {0.62745098039216, 0.32156862745098, 0.17647058823529},
	silver = {0.75294117647059, 0.75294117647059, 0.75294117647059},
	skyblue = {0.52941176470588, 0.8078431372549, 0.92156862745098},
	slateblue = {0.4156862745098, 0.35294117647059, 0.80392156862745},
	slategray = {0.43921568627451, 0.50196078431373, 0.56470588235294},
	slategrey = {0.43921568627451, 0.50196078431373, 0.56470588235294},
	snow = {1, 0.98039215686275, 0.98039215686275},
	springgreen = {0, 1, 0.49803921568627},
	steelblue = {0.27450980392157, 0.50980392156863, 0.70588235294118},
	tan = {0.82352941176471, 0.70588235294118, 0.54901960784314},
	teal = {0, 0.50196078431373, 0.50196078431373},
	thistle = {0.84705882352941, 0.74901960784314, 0.84705882352941},
	tomato = {1, 0.38823529411765, 0.27843137254902},
	turquoise = {0.25098039215686, 0.87843137254902, 0.8156862745098},
	violet = {0.93333333333333, 0.50980392156863, 0.93333333333333},
	wheat = {0.96078431372549, 0.87058823529412, 0.70196078431373},
	white = {1, 1, 1},
	whitesmoke = {0.96078431372549, 0.96078431372549, 0.96078431372549},
	yellow = {1, 1, 0},
	yellowgreen = {0.60392156862745, 0.80392156862745, 0.19607843137255}
}]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBX795ADF4A593D4539AF3798545DBDB4C4">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Main</string>
				<string name="ScriptGuid">{74CCD6FC-BF5A-45B7-A165-3F54549DCF80}</string>
				<ProtectedString name="Source"><![CDATA[local BA = script.Parent
local Config = require(BA.Config)

game:GetService('PhysicsService'):CreateCollisionGroup('BoogleNoCollide')

for _, Group in pairs(game:GetService('PhysicsService'):GetCollisionGroups()) do
	game:GetService('PhysicsService'):CollisionGroupSetCollidable('BoogleNoCollide',Group.name, false)
end

local Remotes = script.Parent.Remotes
Remotes.Name = 'BoogleAdminRemotes'
Remotes.Parent = game.ReplicatedStorage

shared["__BoogleAdmin"] = {
	Folder = BA,
	Remotes = Remotes,
	Config = Config,
	VIPRank = 1,
	ModRank = 2,
	AdminRank = 3,
	HeadAdminRank = 4,
	CreatorRank = 5,
	OwnerRank = 6
}

local CMD = require(script.Parent.Source.CMD)

local CommandsRun = 0

function Posted(Player, Input: string)	
	local Result = CMD:parse({
		InvokerName = Player.Name,
		Invoker = Player.UserId,
		Time = os.time(),
		ID = CommandsRun
	}, Input)
	CommandsRun += 1
	if Result ~= 200 then
		Remotes.Notify:FireClient(Player, 'Command Failed', tostring(Result))
	end
end

Remotes.PostCommand.OnServerEvent:Connect(Posted)

game.Players.PlayerAdded:Connect(function(P:Player)
	
	P.Chatted:Connect(function(M)
		if M:sub(1,1) ~= Config.Prefix then return end
		Posted(P,M)
	end)
	
	local GUI = BA.BoogleAdminGUI:Clone()
	
	local C = script.Parent.Config:Clone()
	C.Parent = GUI
	
	local ArgumentTypes = script.Parent.Source.ArgumentTypes:Clone()
	ArgumentTypes.Parent = GUI
	
	GUI.Parent = P.PlayerGui
	
	local AccessRank = 0
	
	for PermLevel, UserIDList in pairs(Config.Permissions) do
		for _, UserId in ipairs(UserIDList) do
			if UserId == P.UserId  then
				AccessRank = PermLevel
				break
			end
		end
	end
	
	if AccessRank > 0 then
		Remotes.Notify:FireClient(P,'Welcome', Config.WelcomeMessage:format(P.DisplayName,Config.PermToUserFront[AccessRank]))
	end
end)]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBXBEB1245F2F3D4A05B847E933EC9FE25D">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Config</string>
				<string name="ScriptGuid">{EC06E2A8-E0D8-463B-9348-0C9D2E970FD0}</string>
				<ProtectedString name="Source"><![CDATA[local Settings = {
	Prefix = ':',
	CommandBar = true,
	CommandBarKey = Enum.KeyCode.Quote,
	
	PermToUserFront = {
		[6] = 'Owner',
		[5] = 'Creator',
		[4] = 'Head Administrator',
		[3] = 'Administrator',
		[2] = 'Moderator',
		[1] = 'VIP'
	},
	
	Permissions = {
		[6] = {}, -- Owner
		[5] = {}, -- Creator
		[4] = {}, -- Head admin (code)
		[3] = {}, -- Administrator,
		[2] = {}, -- Moderator,
		[1] = {}, -- VIP
	},
	
	WelcomeMessage = [[Welcome %s, you are access level: %s]]
	
}

return Settings]]></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
			</Properties>
		</Item>
		<Item class="ScreenGui" referent="RBXAD6A4B85423A4552AC883144C4946357">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="AutoLocalize">true</bool>
				<int name="DisplayOrder">2</int>
				<bool name="Enabled">true</bool>
				<bool name="IgnoreGuiInset">true</bool>
				<string name="Name">BoogleAdminGUI</string>
				<bool name="ResetOnSpawn">false</bool>
				<Ref name="RootLocalizationTable">null</Ref>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<token name="ZIndexBehavior">1</token>
			</Properties>
			<Item class="TextBox" referent="RBXDCB355C9940E48B9A91D40B2157586E3">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>1</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.0941176564</R>
						<G>0.0941176564</G>
						<B>0.0941176564</B>
					</Color3>
					<float name="BackgroundTransparency">0.400000006</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">0</int>
					<bool name="ClearTextOnFocus">false</bool>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<token name="Font">10</token>
					<Font name="FontFace"></Font>
					<int name="LayoutOrder">0</int>
					<float name="LineHeight">1</float>
					<int name="MaxVisibleGraphemes">-1</int>
					<bool name="MultiLine">false</bool>
					<string name="Name">CommandBar</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<Color3 name="PlaceholderColor3">
						<R>0.699999988</R>
						<G>0.699999988</G>
						<B>0.699999988</B>
					</Color3>
					<string name="PlaceholderText"></string>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>0</XO>
						<YS>1</YS>
						<YO>0</YO>
					</UDim2>
					<bool name="RichText">true</bool>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<bool name="ShowNativeInput">true</bool>
					<UDim2 name="Size">
						<XS>1</XS>
						<XO>0</XO>
						<YS>0.151999995</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<string name="Text"></string>
					<Color3 name="TextColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<bool name="TextEditable">true</bool>
					<bool name="TextScaled">true</bool>
					<float name="TextSize">8</float>
					<Color3 name="TextStrokeColor3">
						<R>0</R>
						<G>0</G>
						<B>0</B>
					</Color3>
					<float name="TextStrokeTransparency">1</float>
					<float name="TextTransparency">0</float>
					<token name="TextTruncate">0</token>
					<bool name="TextWrapped">true</bool>
					<token name="TextXAlignment">0</token>
					<token name="TextYAlignment">1</token>
					<bool name="Visible">false</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UIAspectRatioConstraint" referent="RBXFF3CDDCFB0AD4ABDAA3A2F17CBFF93C6">
					<Properties>
						<float name="AspectRatio">18.6315784</float>
						<token name="AspectType">0</token>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<token name="DominantAxis">0</token>
						<string name="Name">UIAspectRatioConstraint</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="UITextSizeConstraint" referent="RBX9B3F8DEED987443CB77C0069100904DA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<int name="MaxTextSize">35</int>
						<int name="MinTextSize">1</int>
						<string name="Name">UITextSizeConstraint</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="UIStroke" referent="RBX8EA3827330784E8AA95075DD7FEF9EA7">
					<Properties>
						<token name="ApplyStrokeMode">1</token>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="Enabled">true</bool>
						<token name="LineJoinMode">0</token>
						<string name="Name">UIStroke</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<float name="Thickness">2</float>
						<float name="Transparency">0</float>
					</Properties>
				</Item>
			</Item>
			<Item class="LocalScript" referent="RBXE170D995A16646DD81DBDA0AF524727E">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">MainClient</string>
					<string name="ScriptGuid">{50F5A1AA-2826-4B57-BA44-25E413F5500D}</string>
					<ProtectedString name="Source"><![CDATA[local GUI = script.Parent
local CommandBar = script.Parent.CommandBar

CommandBar.Visible = false

local Config = require(script.Parent['Config'])

local Remotes = game.ReplicatedStorage['BoogleAdminRemotes']

local Arguments = require(script.Parent['ArgumentTypes'])

local NotifyIndex = 0

---------------------
-- Functions
---------------------

function ToggleCommandBar(_,InputState: Enum.UserInputState)
	if InputState == Enum.UserInputState.End then
		CommandBar.Visible = not CommandBar.Visible
		
		if CommandBar.Visible then
			CommandBar:CaptureFocus()
			CommandBar.Text = ''
		end
	end
end


function PostCommand(_,InputState: Enum.UserInputState)
	if not CommandBar.Visible then return end

	ToggleCommandBar(nil, Enum.UserInputState.End)
	
	if InputState == Enum.UserInputState.Begin then
		Remotes.PostCommand:FireServer(CommandBar.Text)
	end

	GUI.TextBox.Title.Text = ''
end

function notify(Title, Message)
	local N = script.Notification:Clone()
	N.Parent = GUI.Notif
	N.LayoutOrder = NotifyIndex
	N.Title.Text = ("<b>%s</b>"):format(Title)
	N.Message.Text = Message
	
	N.MouseButton1Click:Connect(function()
		N:Destroy()
	end)
	
	NotifyIndex += 1
	
	game.Debris:AddItem(N,8)
end

function textMessage(Title, Message)
	local size = workspace.CurrentCamera.ViewportSize / 2
	GUI.TextBox.Position = UDim2.fromOffset(size.X,size.Y)
	GUI.TextBox.Title.Text = ("<b>%s</b>"):format(Title)
	GUI.TextBox.Scroll.Message.Text = Message
	
	GUI.TextBox.Visible = true
	GUI.TextBox.Scroll.CanvasPosition = Vector2.new()
	GUI.TextBox.Scroll.CanvasSize = UDim2.fromOffset(0,GUI.TextBox.Scroll.Message.TextBounds.Y)
end


---------------------
-- Actions
---------------------

local KnownCommands = Remotes.GetKnownCommands:InvokeServer()
local boxLength = 0
local BoxItems = {}

function clearBox()
	table.clear(BoxItems)
	boxLength = 0
	GUI.Fill.Visible = false
	for _,v in pairs(GUI.Fill:GetChildren()) do
		if v:IsA('TextLabel') then
			v:Destroy()
		end
	end
end

function addToBox(word)
	boxLength += 1
	if boxLength > 0 then
		GUI.Fill.Visible = true
	end
	table.insert(BoxItems,word)
	local p = script.Possible:Clone()
	p.Parent = GUI.Fill
	p.Text = word
	GUI.Fill.Position = UDim2.fromOffset(GUI.CommandBar.TextBounds.X,GUI.CommandBar.AbsolutePosition.Y)
end



local CurrentCommand
local currentWord
local ignoreClear

function finishWord(_,InputState)
	ignoreClear = true
	if not CommandBar.Visible then return end
	
	pcall(function()
		if InputState == Enum.UserInputState.End then

			CommandBar.Text = CommandBar.Text:sub(1,(#CommandBar.Text-#currentWord))

			CommandBar.Text = CommandBar.Text .. BoxItems[#BoxItems]:sub(1,#BoxItems[#BoxItems]) .. ' '
			CommandBar.CursorPosition = #CommandBar.Text + 1

		end
	end)
	
end


CommandBar:GetPropertyChangedSignal('Text'):Connect(function()
	
	CommandBar.Text = CommandBar.Text:gsub('	','')
	local words = CommandBar.Text:split(' ')
	
	if ignoreClear then
		wait()
		ignoreClear = false
	else
		clearBox()
	end
	if #words[1]:gsub(Config.Prefix,'') == 0 then return end
	local K = #words
	currentWord = words[#words]
	for _, word in pairs(words) do
	 	word = word:gsub(Config.Prefix,'')
		if K == 1 then
			
			for _, cmd in pairs(KnownCommands) do
				if cmd[1]:sub(1,#word) == word:lower() then
					CurrentCommand = cmd
					addToBox(cmd[1])
				end
			end
		elseif CurrentCommand and #CurrentCommand > 0 and #CurrentCommand[2] > 0 then
			
			
			
			clearBox()
			local argType = CurrentCommand[2][K-1]
			
			local result; pcall(function()
				result = Arguments[argType](game.Players.LocalPlayer.UserId,word)
			end)
			
			if result and type(result) ~= 'table' then
				result = {result}
			end
			if result then
				for _, arg in pairs(result) do
					if type(arg) == 'table' then
						for _, v in pairs(arg) do
							addToBox(tostring(v))
						end
					else
						addToBox(tostring(arg))
					end

				end
			end
		end
	end
end)

CommandBar.FocusLost:Connect(function(returnPressed,InputObject)
	if InputObject.KeyCode == Enum.KeyCode.Escape then ToggleCommandBar(nil, Enum.UserInputState.End) return end
	GUI.Fill.Visible = false
	PostCommand(nil, Enum.UserInputState.Begin)
end)

local CAS = game:GetService('ContextActionService')

local Window = require(script.Drag).new(GUI.TextBox)
Window:Enable()

CAS:BindAction('BA_OpenCommandBar', ToggleCommandBar,false,Config.CommandBarKey)
CAS:BindAction('BA_SubmitCommand', PostCommand, false, Enum.KeyCode.Return)

game:GetService('UserInputService').InputBegan:Connect(function(IP,GP)
	if IP.KeyCode == Enum.KeyCode.Tab then
		finishWord(nil,Enum.UserInputState.End)
	end
end)

GUI.TextBox.Title.Close.MouseButton1Click:Connect(function()
	GUI.TextBox.Visible = false
end)

Remotes.Notify.OnClientEvent:Connect(function(T,M)
	notify(T,M)
end)

Remotes.TextMessage.OnClientEvent:Connect(function(T,M)
	textMessage(T,M)
end)]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
				</Properties>
				<Item class="TextButton" referent="RBXF4E5F7327A6A4E72AF2CA2735ED45ABF">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoButtonColor">true</bool>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0.0627451017</R>
							<G>0.0745098069</G>
							<B>0.0862745121</B>
						</Color3>
						<float name="BackgroundTransparency">0.400000006</float>
						<Color3 name="BorderColor3">
							<R>0.054901965</R>
							<G>0.290196091</G>
							<B>0.592156887</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">0</token>
						<Font name="FontFace"></Font>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<bool name="Modal">false</bool>
						<string name="Name">Notification</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.494350284</XS>
							<XO>0</XO>
							<YS>0.632000029</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<bool name="Selected">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0.25</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<token name="Style">0</token>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Button</string>
						<Color3 name="TextColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">8</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">1</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UICorner" referent="RBXCFF21A391B4745CB85B5DCA7FF9B5CDD">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>8</O>
							</UDim>
							<string name="Name">UICorner</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="TextLabel" referent="RBX77854B9BEF534F619890FA9A9DCD2B29">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">10</token>
							<Font name="FontFace"></Font>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">Title</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0.0310734455</XS>
								<XO>0</XO>
								<YS>0.0799999982</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">true</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0.564971745</XS>
								<XO>0</XO>
								<YS>0.263999999</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">&lt;b&gt;Title&lt;/b&gt;</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">false</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">1</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="UIAspectRatioConstraint" referent="RBXCDBC34F671924FA5920FAA5B50E2A836">
						<Properties>
							<float name="AspectRatio">2.83200002</float>
							<token name="AspectType">0</token>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<token name="DominantAxis">0</token>
							<string name="Name">UIAspectRatioConstraint</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="TextLabel" referent="RBX634A029F41744B088709A64E5F7D3BA2">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">10</token>
							<Font name="FontFace"></Font>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">Message</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0.0310734455</XS>
								<XO>0</XO>
								<YS>0.344000012</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">true</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0.920903981</XS>
								<XO>0</XO>
								<YS>0.592000008</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Message</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
					<Item class="UIStroke" referent="RBX5DF6DCA60E8E499990BC1B08786D4FC0">
						<Properties>
							<token name="ApplyStrokeMode">1</token>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Color3 name="Color">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="Enabled">true</bool>
							<token name="LineJoinMode">0</token>
							<string name="Name">UIStroke</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<float name="Thickness">3</float>
							<float name="Transparency">0.400000006</float>
						</Properties>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBXEFDAE856762C4A09B0663B619F172F09">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Drag</string>
						<string name="ScriptGuid">{58D91E23-D8E4-4FB1-AC5E-B595224985CC}</string>
						<ProtectedString name="Source"><![CDATA[local UDim2_new = UDim2.new

local UserInputService = game:GetService("UserInputService")


local DraggableObject 		= {}
DraggableObject.__index 	= DraggableObject

-- Sets up a new draggable object
function DraggableObject.new(Object, Icons)
	local self 			= {}
	self.Object			= Object
	self.Icons = Icons
	self.DragStarted	= nil
	self.DragEnded		= nil
	self.Dragged		= nil
	self.Dragging		= false

	setmetatable(self, DraggableObject)

	return self
end

function Round(x, mult)
	return math.floor((x / mult) + 0.5) * mult
end

function areFramesOverlapping(Frame1,Frame2)
	-- X axis overlap detection
	local F1posX,F2posX = Frame1.AbsolutePosition.X,Frame2.AbsolutePosition.X
	local F1sizeX,F2sizeX = Frame1.AbsoluteSize.X,Frame2.AbsoluteSize.X

	local Xdistance = math.abs(F1posX-F2posX) -- distance (in px) between frames
	local minXdistance = math.abs(F1sizeX+F2sizeX/2)-- min distance w/o overlap

	-- Y axis overlap detection
	local F1posY,F2posY = Frame1.AbsolutePosition.Y,Frame2.AbsolutePosition.Y
	local F1sizeY,F2sizeY = Frame1.AbsoluteSize.Y,Frame2.AbsoluteSize.Y

	local Ydistance = math.abs(F1posY-F2posY) -- distance (in px) between frames
	local minYdistance = math.abs(F1sizeY+F2sizeY/2)-- min distance w/o overlap

	if Ydistance < minYdistance and Xdistance < minXdistance then return true end -- OVERLAP!!

	return false -- no overlap detected
end

-- Enables dragging
function DraggableObject:Enable()
	local object			= self.Object
	local dragInput			= nil
	local dragStart			= nil
	local startPos			= nil
	local preparingToDrag	= false

	-- Updates the element
	local obj = object
	pcall(function() obj = object.Title end)

	local function update(input, name)
		local delta 		= input.Position - dragStart
		local newPosition	= UDim2_new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)

		

		object.Position 	= newPosition



		return newPosition
	end



	self.InputBegan = obj.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			preparingToDrag = true
			--[[if self.DragStarted then
				self.DragStarted()
			end
			
			dragging	 	= true
			dragStart 		= input.Position
			startPos 		= Element.Position
			--]]

			local connection 
			connection = input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End and (self.Dragging or preparingToDrag) then
					self.Dragging = false

					local b = object.Position

					if obj.Name == 'Icon' then
						object.ZIndex = #object.Parent:GetChildren()
						object.ImageTransparency = 0

						object.Position =  UDim2_new(b.X.Scale, Round(b.X.Offset, 32), b.Y.Scale, Round(b.Y.Offset, 32))
						if object.AbsolutePosition.Y <= 0 or object.AbsolutePosition.Y >= workspace.Camera.ViewportSize.Y-150 or object.AbsolutePosition.X >= workspace.Camera.ViewportSize.X - 150 then
							object.Position = startPos
						end
					end

					

					connection:Disconnect()

					if self.DragEnded and not preparingToDrag then
						self.DragEnded()
					end

					preparingToDrag = false
				end
			end)
		end
	end)

	self.InputChanged = obj.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
			dragInput = input
		end
	end)

	self.InputChanged2 = UserInputService.InputChanged:Connect(function(input)

		if object.Parent == nil then
			self:Disable()
			return
		end

		if preparingToDrag then
			preparingToDrag = false

			if self.DragStarted then
				self.DragStarted()
			end

			self.Dragging	= true
			dragStart 		= input.Position
			startPos 		= object.Position
		end

		if input == dragInput and self.Dragging then
			local newPosition = update(input, obj.Name)

			if self.Dragged then
				self.Dragged(newPosition)
			end
		end
	end)
end

-- Disables dragging
function DraggableObject:Disable()
	self.InputBegan:Disconnect()
	self.InputChanged:Disconnect()
	self.InputChanged2:Disconnect()

	if self.Dragging then
		self.Dragging = false

		if self.DragEnded then
			self.DragEnded()
		end
	end
end

return DraggableObject]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="TextLabel" referent="RBX84014CE69D4A485EAD8227677670535D">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticSize">1</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">10</token>
						<Font name="FontFace"></Font>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Possible</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">false</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>15</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">Test</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">true</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">true</bool>
						<token name="TextXAlignment">2</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
				</Item>
			</Item>
			<Item class="Frame" referent="RBXB7014196AD6E41F798E6F5C17B21C0D2">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>1</X>
						<Y>0.5</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>1</R>
						<G>1</G>
						<B>1</B>
					</Color3>
					<float name="BackgroundTransparency">1</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Notif</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>1</XS>
						<XO>8</XO>
						<YS>0.5</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0.5</XS>
						<XO>0</XO>
						<YS>0.899999976</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">true</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UIListLayout" referent="RBX2FDE781045F842739E34A7FE107313A6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<token name="FillDirection">1</token>
						<token name="HorizontalAlignment">2</token>
						<string name="Name">UIListLayout</string>
						<UDim name="Padding">
							<S>0</S>
							<O>10</O>
						</UDim>
						<token name="SortOrder">2</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<token name="VerticalAlignment">2</token>
					</Properties>
				</Item>
			</Item>
			<Item class="Frame" referent="RBXF8BF3187637B47DFB88F82F1A2A91F7E">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0.5</X>
						<Y>0.5</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">0</token>
					<Color3 name="BackgroundColor3">
						<R>0.0627451017</R>
						<G>0.0745098069</G>
						<B>0.0862745121</B>
					</Color3>
					<float name="BackgroundTransparency">0.400000006</float>
					<Color3 name="BorderColor3">
						<R>0.054901965</R>
						<G>0.290196091</G>
						<B>0.592156887</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">true</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">TextBox</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0</XS>
						<XO>150</XO>
						<YS>0</YS>
						<YO>150</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0.300000012</XS>
						<XO>0</XO>
						<YS>0.800000012</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">false</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UICorner" referent="RBX0C11C45F59894DA3BAB612B0186640BF">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<UDim name="CornerRadius">
							<S>0</S>
							<O>8</O>
						</UDim>
						<string name="Name">UICorner</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
				<Item class="TextLabel" referent="RBX48A2D3E5F38F4F26A05CA11C6CC00BA2">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0.5</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">false</bool>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="BackgroundTransparency">0.5</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<token name="Font">10</token>
						<Font name="FontFace"></Font>
						<int name="LayoutOrder">0</int>
						<float name="LineHeight">1</float>
						<int name="MaxVisibleGraphemes">-1</int>
						<string name="Name">Title</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.5</XS>
							<XO>0</XO>
							<YS>0</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="RichText">true</bool>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>1.00000012</XS>
							<XO>0</XO>
							<YS>0.107220381</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<string name="Text">&lt;b&gt;Title&lt;/b&gt;</string>
						<Color3 name="TextColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="TextScaled">false</bool>
						<float name="TextSize">14</float>
						<Color3 name="TextStrokeColor3">
							<R>0</R>
							<G>0</G>
							<B>0</B>
						</Color3>
						<float name="TextStrokeTransparency">1</float>
						<float name="TextTransparency">0</float>
						<token name="TextTruncate">0</token>
						<bool name="TextWrapped">false</bool>
						<token name="TextXAlignment">0</token>
						<token name="TextYAlignment">1</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="UICorner" referent="RBXBC007A7CAF4B4267AA8A6B37B590411C">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<UDim name="CornerRadius">
								<S>0</S>
								<O>8</O>
							</UDim>
							<string name="Name">UICorner</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
					<Item class="ImageButton" referent="RBXB766D1240D9047EABDF216ED9A778002">
						<Properties>
							<bool name="Active">true</bool>
							<Vector2 name="AnchorPoint">
								<X>1</X>
								<Y>0.5</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoButtonColor">true</bool>
							<bool name="AutoLocalize">true</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<Content name="HoverImage"><null></null></Content>
							<Content name="Image"><url>rbxassetid://5755239863</url></Content>
							<Color3 name="ImageColor3">
								<R>1</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<Vector2 name="ImageRectOffset">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<Vector2 name="ImageRectSize">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<float name="ImageTransparency">0</float>
							<int name="LayoutOrder">0</int>
							<bool name="Modal">false</bool>
							<string name="Name">Close</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>1</XS>
								<XO>-10</XO>
								<YS>0.5</YS>
								<YO>0</YO>
							</UDim2>
							<Content name="PressedImage"><null></null></Content>
							<token name="ResampleMode">0</token>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<token name="ScaleType">0</token>
							<bool name="Selectable">true</bool>
							<bool name="Selected">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>0</XS>
								<XO>100</XO>
								<YS>0.5</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<Rect2D name="SliceCenter">
								<min>
									<X>0</X>
									<Y>0</Y>
								</min>
								<max>
									<X>0</X>
									<Y>0</Y>
								</max>
							</Rect2D>
							<float name="SliceScale">1</float>
							<int64 name="SourceAssetId">-1</int64>
							<token name="Style">0</token>
							<BinaryString name="Tags"></BinaryString>
							<UDim2 name="TileSize">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="UIAspectRatioConstraint" referent="RBXBCC2D6D8E4AD4055ABD280C69E69DD03">
							<Properties>
								<float name="AspectRatio">1</float>
								<token name="AspectType">0</token>
								<BinaryString name="AttributesSerialize"></BinaryString>
								<token name="DominantAxis">0</token>
								<string name="Name">UIAspectRatioConstraint</string>
								<int64 name="SourceAssetId">-1</int64>
								<BinaryString name="Tags"></BinaryString>
							</Properties>
						</Item>
					</Item>
					<Item class="UIAspectRatioConstraint" referent="RBX9A07D20538894C3BA60A5F13475A0E53">
						<Properties>
							<float name="AspectRatio">12.9530983</float>
							<token name="AspectType">0</token>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<token name="DominantAxis">0</token>
							<string name="Name">UIAspectRatioConstraint</string>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
						</Properties>
					</Item>
				</Item>
				<Item class="UIStroke" referent="RBX3A8581DCD8294B838CCAF6BEBAA2B0AA">
					<Properties>
						<token name="ApplyStrokeMode">1</token>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Color3 name="Color">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<bool name="Enabled">true</bool>
						<token name="LineJoinMode">0</token>
						<string name="Name">UIStroke</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<float name="Thickness">3</float>
						<float name="Transparency">0.400000006</float>
					</Properties>
				</Item>
				<Item class="ScrollingFrame" referent="RBXE7953A8D3659401D9B3106E8D0D02753">
					<Properties>
						<bool name="Active">false</bool>
						<Vector2 name="AnchorPoint">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="AutoLocalize">true</bool>
						<token name="AutomaticCanvasSize">0</token>
						<token name="AutomaticSize">0</token>
						<Color3 name="BackgroundColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">
							<R>0.105882362</R>
							<G>0.164705887</G>
							<B>0.207843155</B>
						</Color3>
						<token name="BorderMode">0</token>
						<int name="BorderSizePixel">1</int>
						<Content name="BottomImage"><url>rbxasset://textures/ui/Scroll/scroll-middle.png</url></Content>
						<Vector2 name="CanvasPosition">
							<X>0</X>
							<Y>0</Y>
						</Vector2>
						<UDim2 name="CanvasSize">
							<XS>0</XS>
							<XO>0</XO>
							<YS>2</YS>
							<YO>0</YO>
						</UDim2>
						<bool name="ClipsDescendants">true</bool>
						<bool name="Draggable">false</bool>
						<token name="ElasticBehavior">0</token>
						<token name="HorizontalScrollBarInset">0</token>
						<int name="LayoutOrder">0</int>
						<Content name="MidImage"><url>rbxasset://textures/ui/Scroll/scroll-middle.png</url></Content>
						<string name="Name">Scroll</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0.0353838131</XS>
							<XO>0</XO>
							<YS>0.144847423</YS>
							<YO>0</YO>
						</UDim2>
						<Ref name="RootLocalizationTable">null</Ref>
						<float name="Rotation">0</float>
						<Color3 name="ScrollBarImageColor3">
							<R>1</R>
							<G>1</G>
							<B>1</B>
						</Color3>
						<float name="ScrollBarImageTransparency">0</float>
						<int name="ScrollBarThickness">6</int>
						<token name="ScrollingDirection">4</token>
						<bool name="ScrollingEnabled">true</bool>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0.920903981</XS>
							<XO>0</XO>
							<YS>0.82505101</YS>
							<YO>0</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<Content name="TopImage"><url>rbxasset://textures/ui/Scroll/scroll-middle.png</url></Content>
						<token name="VerticalScrollBarInset">0</token>
						<token name="VerticalScrollBarPosition">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="TextLabel" referent="RBX80AFF03B3DAA48DF8D1996765361AF0F">
						<Properties>
							<bool name="Active">false</bool>
							<Vector2 name="AnchorPoint">
								<X>0</X>
								<Y>0</Y>
							</Vector2>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<bool name="AutoLocalize">false</bool>
							<token name="AutomaticSize">0</token>
							<Color3 name="BackgroundColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">
								<R>0.105882362</R>
								<G>0.164705887</G>
								<B>0.207843155</B>
							</Color3>
							<token name="BorderMode">0</token>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<token name="Font">10</token>
							<Font name="FontFace"></Font>
							<int name="LayoutOrder">0</int>
							<float name="LineHeight">1</float>
							<int name="MaxVisibleGraphemes">-1</int>
							<string name="Name">Message</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>0</YO>
							</UDim2>
							<bool name="RichText">true</bool>
							<Ref name="RootLocalizationTable">null</Ref>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>0</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<string name="Text">Message</string>
							<Color3 name="TextColor3">
								<R>1</R>
								<G>1</G>
								<B>1</B>
							</Color3>
							<bool name="TextScaled">false</bool>
							<float name="TextSize">14</float>
							<Color3 name="TextStrokeColor3">
								<R>0</R>
								<G>0</G>
								<B>0</B>
							</Color3>
							<float name="TextStrokeTransparency">1</float>
							<float name="TextTransparency">0</float>
							<token name="TextTruncate">0</token>
							<bool name="TextWrapped">true</bool>
							<token name="TextXAlignment">0</token>
							<token name="TextYAlignment">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
					</Item>
				</Item>
			</Item>
			<Item class="Frame" referent="RBX6AE8EABEF2F648CB8B17E0AB73B5160E">
				<Properties>
					<bool name="Active">false</bool>
					<Vector2 name="AnchorPoint">
						<X>0</X>
						<Y>0</Y>
					</Vector2>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="AutoLocalize">true</bool>
					<token name="AutomaticSize">3</token>
					<Color3 name="BackgroundColor3">
						<R>0.0941176564</R>
						<G>0.0941176564</G>
						<B>0.0941176564</B>
					</Color3>
					<float name="BackgroundTransparency">0.400000006</float>
					<Color3 name="BorderColor3">
						<R>0.105882362</R>
						<G>0.164705887</G>
						<B>0.207843155</B>
					</Color3>
					<token name="BorderMode">0</token>
					<int name="BorderSizePixel">1</int>
					<bool name="ClipsDescendants">false</bool>
					<bool name="Draggable">false</bool>
					<int name="LayoutOrder">0</int>
					<string name="Name">Fill</string>
					<Ref name="NextSelectionDown">null</Ref>
					<Ref name="NextSelectionLeft">null</Ref>
					<Ref name="NextSelectionRight">null</Ref>
					<Ref name="NextSelectionUp">null</Ref>
					<UDim2 name="Position">
						<XS>0.286470145</XS>
						<XO>0</XO>
						<YS>0.305970162</YS>
						<YO>0</YO>
					</UDim2>
					<Ref name="RootLocalizationTable">null</Ref>
					<float name="Rotation">0</float>
					<bool name="Selectable">false</bool>
					<Ref name="SelectionImageObject">null</Ref>
					<UDim2 name="Size">
						<XS>0</XS>
						<XO>0</XO>
						<YS>0</YS>
						<YO>0</YO>
					</UDim2>
					<token name="SizeConstraint">0</token>
					<int64 name="SourceAssetId">-1</int64>
					<token name="Style">0</token>
					<BinaryString name="Tags"></BinaryString>
					<bool name="Visible">false</bool>
					<int name="ZIndex">1</int>
				</Properties>
				<Item class="UIListLayout" referent="RBXC1FF10E1D5544608B84B11ED2A0CB42E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<token name="FillDirection">1</token>
						<token name="HorizontalAlignment">1</token>
						<string name="Name">UIListLayout</string>
						<UDim name="Padding">
							<S>0</S>
							<O>0</O>
						</UDim>
						<token name="SortOrder">2</token>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<token name="VerticalAlignment">2</token>
					</Properties>
				</Item>
				<Item class="UICorner" referent="RBX8F1FBF1CAA26452BB2C5DF3B97640887">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<UDim name="CornerRadius">
							<S>0</S>
							<O>8</O>
						</UDim>
						<string name="Name">UICorner</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
	<SharedStrings>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
		<SharedString md5="+qv2o0HSW+htH+ALwYQpiw==">Q1NHUEhTAAAAAEJMT0NL</SharedString>
	</SharedStrings>
</roblox>